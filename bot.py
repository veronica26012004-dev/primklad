import sqlite3
import telebot
from telebot import types
import threading
import logging
import os
from datetime import datetime, timedelta
from uuid import uuid4
import time
from flask import Flask, request

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv('BOT_TOKEN', '8464322471:AAE3QyJrHrCS8lwAj4jD8NLuOy5kYnToumM')
WEBHOOK_URL = os.getenv('WEBHOOK_URL', '')  # URL –≤–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ Render
PORT = int(os.getenv('PORT', 10000))  # –ü–æ—Ä—Ç –¥–ª—è Render

bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è thread-safe –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–î
db_lock = threading.Lock()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –º–µ—Å—è—Ü–µ–≤ –≤ —á–∏—Å–ª–∞
MONTHS = {
    '—è–Ω–≤–∞—Ä—è': 1, '—Ñ–µ–≤—Ä–∞–ª—è': 2, '–º–∞—Ä—Ç–∞': 3, '–∞–ø—Ä–µ–ª—è': 4, '–º–∞—è': 5, '–∏—é–Ω—è': 6,
    '–∏—é–ª—è': 7, '–∞–≤–≥—É—Å—Ç–∞': 8, '—Å–µ–Ω—Ç—è–±—Ä—è': 9, '–æ–∫—Ç—è–±—Ä—è': 10, '–Ω–æ—è–±—Ä—è': 11, '–¥–µ–∫–∞–±—Ä—è': 12
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_database():
    with db_lock:
        try:
            conn = sqlite3.connect('inventory.db', check_same_thread=False)
            cursor = conn.cursor()
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS items (
                    id TEXT PRIMARY KEY,
                    item_name TEXT NOT NULL,
                    owner TEXT,
                    issued INTEGER DEFAULT 0,
                    storage TEXT NOT NULL
                )
            ''')
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS events (
                    id TEXT PRIMARY KEY,
                    event_name TEXT NOT NULL,
                    event_date TEXT NOT NULL
                )
            ''')
            conn.commit()
            logging.info("Database initialized successfully")
        except Exception as e:
            logging.error(f"Error initializing database: {e}")
        finally:
            conn.close()

init_database()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
def normalize_text(text):
    return ' '.join(text.strip().split()).lower()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
def get_inventory(storage=None):
    with db_lock:
        try:
            conn = sqlite3.connect('inventory.db', check_same_thread=False)
            cursor = conn.cursor()
            if storage:
                cursor.execute('SELECT id, item_name, owner, issued, storage FROM items WHERE storage = ?', (storage,))
            else:
                cursor.execute('SELECT id, item_name, owner, issued, storage FROM items')
            items = cursor.fetchall()
            logging.info(f"Fetched inventory for storage {storage}: {items}")
            conn.close()
            return items
        except Exception as e:
            logging.error(f"Error fetching inventory: {e}")
            return []

def add_item(item_name, storage):
    item_id = str(uuid4())
    with db_lock:
        try:
            conn = sqlite3.connect('inventory.db', check_same_thread=False)
            cursor = conn.cursor()
            cursor.execute('INSERT INTO items (id, item_name, owner, issued, storage) VALUES (?, ?, ?, ?, ?)', 
                          (item_id, item_name, None, 0, storage))
            conn.commit()
            logging.info(f"Added item: {item_name}, storage: {storage}, id: {item_id}")
            conn.close()
            return item_id
        except Exception as e:
            logging.error(f"Error adding item {item_name}: {e}")
            conn.close()
            return None

def delete_item(item_ids):
    with db_lock:
        try:
            conn = sqlite3.connect('inventory.db', check_same_thread=False)
            cursor = conn.cursor()
            if isinstance(item_ids, list):
                cursor.executemany('DELETE FROM items WHERE id = ?', [(item_id,) for item_id in item_ids])
            else:
                cursor.execute('DELETE FROM items WHERE id = ?', (item_ids,))
            conn.commit()
            logging.info(f"Deleted items with ids: {item_ids}")
            conn.close()
        except Exception as e:
            logging.error(f"Error deleting items {item_ids}: {e}")

def update_item_owner(item_id, owner):
    with db_lock:
        try:
            conn = sqlite3.connect('inventory.db', check_same_thread=False)
            cursor = conn.cursor()
            cursor.execute('UPDATE items SET owner = ?, issued = 1 WHERE id = ?', (owner, item_id))
            conn.commit()
            logging.info(f"Updated item {item_id} to owner: {owner}")
            conn.close()
        except Exception as e:
            logging.error(f"Error updating item {item_id} owner: {e}")

def return_item(item_ids):
    with db_lock:
        try:
            conn = sqlite3.connect('inventory.db', check_same_thread=False)
            cursor = conn.cursor()
            if isinstance(item_ids, list):
                cursor.executemany('UPDATE items SET owner = NULL, issued = 0 WHERE id = ?', [(item_id,) for item_id in item_ids])
            else:
                cursor.execute('UPDATE items SET owner = NULL, issued = 0 WHERE id = ?', (item_ids,))
            conn.commit()
            logging.info(f"Returned items with ids: {item_ids}")
            conn.close()
        except Exception as e:
            logging.error(f"Error returning items {item_ids}: {e}")

def find_item_in_db(item_name, storage):
    with db_lock:
        try:
            conn = sqlite3.connect('inventory.db', check_same_thread=False)
            cursor = conn.cursor()
            cursor.execute('SELECT id, item_name FROM items WHERE storage = ?', (storage,))
            all_items = cursor.fetchall()
            conn.close()
            normalized_search = normalize_text(item_name)
            for item_id, db_item in all_items:
                if normalize_text(db_item) == normalized_search:
                    return item_id, db_item
            return None, None
        except Exception as e:
            logging.error(f"Error finding item {item_name} in storage {storage}: {e}")
            return None, None

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–±—ã—Ç–∏—è–º–∏
def add_event(event_name, event_date):
    event_id = str(uuid4())
    with db_lock:
        try:
            conn = sqlite3.connect('inventory.db', check_same_thread=False)
            cursor = conn.cursor()
            cursor.execute('INSERT INTO events (id, event_name, event_date) VALUES (?, ?, ?)',
                          (event_id, event_name, event_date))
            conn.commit()
            logging.info(f"Added event: {event_name}, date: {event_date}")
            conn.close()
            return event_id
        except Exception as e:
            logging.error(f"Error adding event {event_name}: {e}")
            conn.close()
            return None

def get_events(period=None):
    with db_lock:
        try:
            conn = sqlite3.connect('inventory.db', check_same_thread=False)
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            current_date = datetime.now().strftime('%Y-%m-%d')
            
            if period == 'week':
                end_date = (datetime.now() + timedelta(days=7)).strftime('%Y-%m-%d')
                cursor.execute('SELECT id, event_name, event_date FROM events WHERE event_date BETWEEN ? AND ? ORDER BY event_date', 
                              (current_date, end_date))
            elif period == 'month':
                end_date = (datetime.now() + timedelta(days=30)).strftime('%Y-%m-%d')
                cursor.execute('SELECT id, event_name, event_date FROM events WHERE event_date BETWEEN ? AND ? ORDER BY event_date', 
                              (current_date, end_date))
            else:
                # –î–ª—è 'all' –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–µ
                cursor.execute('SELECT id, event_name, event_date FROM events ORDER BY event_date')
            
            events = cursor.fetchall()
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π
            validated_events = []
            for event in events:
                try:
                    event_id, event_name, event_date = event
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
                    datetime.strptime(event_date, '%Y-%m-%d')
                    validated_events.append(event)
                except ValueError:
                    logging.warning(f"Invalid date format for event {event_name}: {event_date}")
            
            logging.info(f"Fetched {len(validated_events)} events for period '{period}'")
            conn.close()
            return validated_events
            
        except Exception as e:
            logging.error(f"Error fetching events: {e}")
            return []

def delete_event(event_id):
    with db_lock:
        try:
            conn = sqlite3.connect('inventory.db', check_same_thread=False)
            cursor = conn.cursor()
            cursor.execute('DELETE FROM events WHERE id = ?', (event_id,))
            conn.commit()
            logging.info(f"Deleted event with id: {event_id}")
            conn.close()
        except Exception as e:
            logging.error(f"Error deleting event {event_id}: {e}")

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def create_main_menu_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        types.KeyboardButton('üì¶ –ö–ª–∞–¥–æ–≤–∞—è'),
        types.KeyboardButton('üìÖ –°–æ–±—ã—Ç–∏—è')
    ]
    keyboard.add(*buttons)
    return keyboard

def create_storage_selection_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        types.KeyboardButton('üìç –ì—Ä–∏–Ω–±–æ–∫—Å 11'),
        types.KeyboardButton('üìç –ì—Ä–∏–Ω–±–æ–∫—Å 12'),
        types.KeyboardButton('üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    ]
    keyboard.add(*buttons)
    return keyboard

def create_storage_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        types.KeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å'),
        types.KeyboardButton('‚ûñ –£–¥–∞–ª–∏—Ç—å'),
        types.KeyboardButton('üéÅ –í—ã–¥–∞—Ç—å'),
        types.KeyboardButton('‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å'),
        types.KeyboardButton('üìã –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å'),
        types.KeyboardButton('üîô –ù–∞–∑–∞–¥')
    ]
    keyboard.add(*buttons)
    return keyboard

def create_events_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        types.KeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ'),
        types.KeyboardButton('üìÖ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–±—ã—Ç–∏—è'),
        types.KeyboardButton('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ'),
        types.KeyboardButton('üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    ]
    keyboard.add(*buttons)
    return keyboard

def create_add_items_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    buttons = [
        types.KeyboardButton('‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–≤–æ–¥')
    ]
    keyboard.add(*buttons)
    return keyboard

def create_item_keyboard(items, action):
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    for item_id, item_name, _, _, _ in sorted(items, key=lambda x: x[1]):
        callback_data = f"{action}:{item_id}"
        keyboard.add(types.InlineKeyboardButton(text=item_name, callback_data=callback_data))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í–µ—Ä–Ω—É—Ç—å –≤—Å–µ" —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    if action == 'return':
        keyboard.add(types.InlineKeyboardButton(text="‚úÖ –í–µ—Ä–Ω—É—Ç—å –≤—Å–µ", callback_data="return:all"))
    
    keyboard.add(types.InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞", callback_data=f"{action}:cancel"))
    
    if action in ['give', 'delete', 'return']:
        keyboard.add(types.InlineKeyboardButton(
            text=f"‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å {'–≤—ã–¥–∞—á—É' if action == 'give' else '—É–¥–∞–ª–µ–Ω–∏–µ' if action == 'delete' else '–≤–æ–∑–≤—Ä–∞—Ç'}", 
            callback_data=f"{action}:done"))
    
    return keyboard

def create_event_keyboard(events, action):
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    for event_id, event_name, event_date in sorted(events, key=lambda x: x[2]):
        display_text = f"{event_name} ({event_date})"
        callback_data = f"{action}:{event_id}"
        keyboard.add(types.InlineKeyboardButton(text=display_text, callback_data=callback_data))
    keyboard.add(types.InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞", callback_data=f"{action}:cancel"))
    return keyboard

def create_period_keyboard():
    keyboard = types.InlineKeyboardMarkup(row_width=3)
    buttons = [
        types.InlineKeyboardButton(text="–ù–µ–¥–µ–ª—è", callback_data="view_events:week"),
        types.InlineKeyboardButton(text="–ú–µ—Å—è—Ü", callback_data="view_events:month"),
        types.InlineKeyboardButton(text="–í—Å–µ", callback_data="view_events:all")
    ]
    keyboard.add(*buttons)
    keyboard.add(types.InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞", callback_data="view_events:cancel"))
    return keyboard

# –§—É–Ω–∫—Ü–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
def show_main_menu(chat_id):
    text = "üìã *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"
    bot.send_message(chat_id, text, parse_mode='Markdown', reply_markup=create_main_menu_keyboard())
    user_states[chat_id] = 'main_menu'

def show_storage_selection(chat_id):
    text = "üì¶ *–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞–¥–æ–≤—É—é:*"
    bot.send_message(chat_id, text, parse_mode='Markdown', reply_markup=create_storage_selection_keyboard())
    user_states[chat_id] = 'storage_selection'

def show_inventory(chat_id, storage):
    inventory = get_inventory(storage)
    text = f"üì¶ *–ò–ù–í–ï–ù–¢–ê–†–¨ ({storage}):*\n\n"
    if not inventory:
        text += "üì≠ –ü—É—Å—Ç–æ\n"
    else:
        available_count = 0
        given_count = 0
        for _, item_name, owner, issued, _ in sorted(inventory, key=lambda x: x[1]):
            if owner is None and issued == 0:
                text += f"‚úÖ **{item_name}** - –¥–æ—Å—Ç—É–ø–µ–Ω\n"
                available_count += 1
            else:
                text += f"üî∏ {item_name} - {owner or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                given_count += 1
        text += f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {available_count} –¥–æ—Å—Ç—É–ø–Ω–æ, {given_count} –≤—ã–¥–∞–Ω–æ"
    bot.send_message(chat_id, text, parse_mode='Markdown', reply_markup=create_storage_keyboard())
    user_states[chat_id] = ('storage', storage)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
    logging.info(f"User {message.chat.id} started bot")
    welcome_text = "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ–º –∏ —Å–æ–±—ã—Ç–∏—è–º–∏!*\n\n"
    welcome_text += "üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã:*\n"
    welcome_text += "üì¶ –ö–ª–∞–¥–æ–≤–∞—è - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ–º\n"
    welcome_text += "üìÖ –°–æ–±—ã—Ç–∏—è - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è–º–∏"
    bot.send_message(message.chat.id, welcome_text, parse_mode='Markdown', reply_markup=create_main_menu_keyboard())
    show_main_menu(message.chat.id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    chat_id = call.message.chat.id
    data = call.data.split(':')
    action = data[0]
    param = data[1] if len(data) > 1 else None

    try:
        state = user_states.get(chat_id, ('storage', None))
        if isinstance(state, tuple) and len(state) > 1:
            storage = state[1]
        else:
            storage = None
            logging.warning(f"No storage found in state for user {chat_id}: {state}")

        if action == 'give':
            if param == 'cancel':
                bot.delete_message(chat_id, call.message.message_id)
                bot.send_message(chat_id, "üëå –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é", reply_markup=create_storage_keyboard())
                show_inventory(chat_id, storage)
                user_states[chat_id] = ('storage', storage)
                return
            elif param == 'done':
                if isinstance(state, tuple) and state[0] == 'give_items':
                    recipient, selected_items, storage = state[1], state[2], state[3]
                    if not selected_items:
                        bot.delete_message(chat_id, call.message.message_id)
                        bot.send_message(chat_id, "‚ö†Ô∏è –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞!", 
                                       parse_mode='Markdown', reply_markup=create_storage_keyboard())
                        show_inventory(chat_id, storage)
                        user_states[chat_id] = ('storage', storage)
                        return
                    for item_id in selected_items:
                        update_item_owner(item_id, recipient)
                    bot.delete_message(chat_id, call.message.message_id)
                    bot.send_message(chat_id, f"‚úÖ –ü—Ä–µ–¥–º–µ—Ç—ã –≤—ã–¥–∞–Ω—ã *{recipient}*!",
                                   parse_mode='Markdown', reply_markup=create_storage_keyboard())
                    show_inventory(chat_id, storage)
                    user_states[chat_id] = ('storage', storage)
                    return
            if isinstance(state, tuple) and state[0] == 'give_items':
                recipient, selected_items, storage = state[1], state[2], state[3]
                if param and param not in selected_items:
                    selected_items.append(param)
                user_states[chat_id] = ('give_items', recipient, selected_items, storage)
                inventory = get_inventory(storage)
                available_items = [(item_id, item_name, owner, issued, _) for item_id, item_name, owner, issued, _ in inventory 
                                 if issued == 0 and item_id not in selected_items]
                if available_items:
                    keyboard = create_item_keyboard(available_items, 'give')
                    selected_text = ", ".join([item_name for item_id, item_name, _, _, _ in inventory 
                                             if item_id in selected_items]) or "–Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ"
                    bot.edit_message_text(
                        f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: *{recipient}*\nüì¶ *–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –≤—ã–¥–∞—á–∏ ({storage}):* (–≤—ã–±—Ä–∞–Ω–æ: {selected_text}):",
                        chat_id, call.message.message_id, parse_mode='Markdown', reply_markup=keyboard)
                else:
                    bot.delete_message(chat_id, call.message.message_id)
                    bot.send_message(chat_id, "‚ö†Ô∏è –ë–æ–ª—å—à–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤!", reply_markup=create_storage_keyboard())
                    show_inventory(chat_id, storage)
                    user_states[chat_id] = ('storage', storage)

        elif action == 'delete':
            if param == 'cancel':
                bot.delete_message(chat_id, call.message.message_id)
                bot.send_message(chat_id, "üëå –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é", reply_markup=create_storage_keyboard())
                show_inventory(chat_id, storage)
                user_states[chat_id] = ('storage', storage)
                return
            elif param == 'done':
                if isinstance(state, tuple) and state[0] == 'delete_items':
                    selected_items, storage = state[1], state[2]
                    if not selected_items:
                        bot.delete_message(chat_id, call.message.message_id)
                        bot.send_message(chat_id, "‚ö†Ô∏è –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞!", 
                                       parse_mode='Markdown', reply_markup=create_storage_keyboard())
                        show_inventory(chat_id, storage)
                        user_states[chat_id] = ('storage', storage)
                        return
                    delete_item(selected_items)
                    bot.delete_message(chat_id, call.message.message_id)
                    bot.send_message(chat_id, f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: *{len(selected_items)}*",
                                   parse_mode='Markdown', reply_markup=create_storage_keyboard())
                    show_inventory(chat_id, storage)
                    user_states[chat_id] = ('storage', storage)
                    return
            if isinstance(state, tuple) and state[0] == 'delete_items':
                selected_items, storage = state[1], state[2]
                if param and param not in selected_items:
                    selected_items.append(param)
                user_states[chat_id] = ('delete_items', selected_items, storage)
                inventory = get_inventory(storage)
                available_items = [(item_id, item_name, owner, issued, _) for item_id, item_name, owner, issued, _ in inventory 
                                 if item_id not in selected_items]
                if available_items:
                    keyboard = create_item_keyboard(available_items, 'delete')
                    selected_text = ", ".join([item_name for item_id, item_name, _, _, _ in inventory 
                                             if item_id in selected_items]) or "–Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ"
                    bot.edit_message_text(
                        f"üóëÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è ({storage}):* (–≤—ã–±—Ä–∞–Ω–æ: {selected_text}):",
                        chat_id, call.message.message_id, parse_mode='Markdown', reply_markup=keyboard)
                else:
                    bot.delete_message(chat_id, call.message.message_id)
                    bot.send_message(chat_id, "‚ö†Ô∏è –ë–æ–ª—å—à–µ –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!", reply_markup=create_storage_keyboard())
                    show_inventory(chat_id, storage)
                    user_states[chat_id] = ('storage', storage)

        elif action == 'return':
            if param == 'cancel':
                bot.delete_message(chat_id, call.message.message_id)
                bot.send_message(chat_id, "üëå –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é", reply_markup=create_storage_keyboard())
                show_inventory(chat_id, storage)
                user_states[chat_id] = ('storage', storage)
                return
            elif param == 'done':
                if isinstance(state, tuple) and state[0] == 'return_items':
                    selected_items, storage = state[1], state[2]
                    if not selected_items:
                        bot.delete_message(chat_id, call.message.message_id)
                        bot.send_message(chat_id, "‚ö†Ô∏è –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞!", 
                                       parse_mode='Markdown', reply_markup=create_storage_keyboard())
                        show_inventory(chat_id, storage)
                        user_states[chat_id] = ('storage', storage)
                        return
                    return_item(selected_items)
                    bot.delete_message(chat_id, call.message.message_id)
                    bot.send_message(chat_id, f"‚úÖ –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: *{len(selected_items)}*",
                                   parse_mode='Markdown', reply_markup=create_storage_keyboard())
                    show_inventory(chat_id, storage)
                    user_states[chat_id] = ('storage', storage)
                    return
            elif param == 'all':
                inventory = get_inventory(storage)
                selected_items = [item_id for item_id, _, _, issued, _ in inventory if issued == 1]
                if selected_items:
                    return_item(selected_items)
                    bot.delete_message(chat_id, call.message.message_id)
                    bot.send_message(chat_id, f"‚úÖ –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤: *{len(selected_items)}*",
                                   parse_mode='Markdown', reply_markup=create_storage_keyboard())
                    show_inventory(chat_id, storage)
                    user_states[chat_id] = ('storage', storage)
                else:
                    bot.delete_message(chat_id, call.message.message_id)
                    bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ—Ç –≤—ã–¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤!", reply_markup=create_storage_keyboard())
                    show_inventory(chat_id, storage)
                    user_states[chat_id] = ('storage', storage)
                return
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
            if isinstance(state, tuple) and state[0] == 'return_items':
                selected_items, storage = state[1], state[2]
                if param and param not in selected_items:
                    selected_items.append(param)
                user_states[chat_id] = ('return_items', selected_items, storage)
                inventory = get_inventory(storage)
                issued_items = [(item_id, item_name, owner, issued, _) for item_id, item_name, owner, issued, _ in inventory 
                               if issued == 1 and item_id not in selected_items]
                logging.info(f"Issued items for return in {storage}: {issued_items}")
                if issued_items:
                    keyboard = create_item_keyboard(issued_items, 'return')
                    selected_text = ", ".join([item_name for item_id, item_name, _, _, _ in inventory 
                                             if item_id in selected_items]) or "–Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ"
                    bot.edit_message_text(
                        f"üì¶ *–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ ({storage}):* (–≤—ã–±—Ä–∞–Ω–æ: {selected_text}):",
                        chat_id, call.message.message_id, parse_mode='Markdown', reply_markup=keyboard)
                else:
                    # –ï—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç –≤—ã–¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤, –∑–∞–≤–µ—Ä—à–∞–µ–º –≤–æ–∑–≤—Ä–∞—Ç
                    if selected_items:
                        return_item(selected_items)
                        bot.delete_message(chat_id, call.message.message_id)
                        bot.send_message(chat_id, f"‚úÖ –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: *{len(selected_items)}*",
                                       parse_mode='Markdown', reply_markup=create_storage_keyboard())
                        show_inventory(chat_id, storage)
                        user_states[chat_id] = ('storage', storage)
                    else:
                        bot.delete_message(chat_id, call.message.message_id)
                        bot.send_message(chat_id, "‚ö†Ô∏è –ë–æ–ª—å—à–µ –Ω–µ—Ç –≤—ã–¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤!", reply_markup=create_storage_keyboard())
                        show_inventory(chat_id, storage)
                        user_states[chat_id] = ('storage', storage)
                return
            
            # –ü—Ä—è–º–æ–π –≤–æ–∑–≤—Ä–∞—Ç –ø—Ä–µ–¥–º–µ—Ç–∞ (–±–µ–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞)
            if param:
                return_item(param)
                bot.delete_message(chat_id, call.message.message_id)
                bot.send_message(chat_id, f"‚úÖ –ü—Ä–µ–¥–º–µ—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å!",
                               parse_mode='Markdown', reply_markup=create_storage_keyboard())
                show_inventory(chat_id, storage)
                user_states[chat_id] = ('storage', storage)

        elif action == 'view_events':
            if param == 'cancel':
                bot.delete_message(chat_id, call.message.message_id)
                bot.send_message(chat_id, "üëå –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é", reply_markup=create_events_keyboard())
                user_states[chat_id] = 'events'
                return
            
            events = get_events(param)
            if not events:
                bot.delete_message(chat_id, call.message.message_id)
                
                period_text = {
                    'week': '–Ω–∞ –Ω–µ–¥–µ–ª—é',
                    'month': '–Ω–∞ –º–µ—Å—è—Ü', 
                    'all': '–≤–æ–æ–±—â–µ'
                }.get(param, '')
                
                bot.send_message(chat_id, f"üìÖ –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π {period_text}!", reply_markup=create_events_keyboard())
                user_states[chat_id] = 'events'
                return
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            period_text = {
                'week': '–Ω–∞ –Ω–µ–¥–µ–ª—é',
                'month': '–Ω–∞ –º–µ—Å—è—Ü',
                'all': '–≤—Å–µ'
            }.get(param, param)
            
            text = f"üìÖ *–°–æ–±—ã—Ç–∏—è ({period_text}):*\n\n"
            for _, event_name, event_date in sorted(events, key=lambda x: x[2]):  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
                try:
                    date_obj = datetime.strptime(event_date, '%Y-%m-%d')
                    formatted_date = date_obj.strftime('%d.%m.%Y')
                    text += f"üìå *{event_name}* - {formatted_date}\n"
                except ValueError:
                    text += f"üìå *{event_name}* - {event_date} (–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)\n"
            
            bot.edit_message_text(text, chat_id, call.message.message_id, parse_mode='Markdown')
            user_states[chat_id] = 'events'

        elif action == 'delete_event':
            if param == 'cancel':
                bot.delete_message(chat_id, call.message.message_id)
                bot.send_message(chat_id, "üëå –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é", reply_markup=create_events_keyboard())
                user_states[chat_id] = 'events'
                return
            if param:
                delete_event(param)
                bot.delete_message(chat_id, call.message.message_id)
                bot.send_message(chat_id, f"‚úÖ –°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ!", reply_markup=create_events_keyboard())
                user_states[chat_id] = 'events'

    except Exception as e:
        logging.error(f"Error in callback_query from {chat_id}: {e}")
        bot.delete_message(chat_id, call.message.message_id)
        bot.send_message(chat_id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", 
                        parse_mode='Markdown', reply_markup=create_main_menu_keyboard())
        show_main_menu(chat_id)

# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    chat_id = message.chat.id
    text = message.text.strip()
    state = user_states.get(chat_id, 'main_menu')

    try:
        if state == 'main_menu':
            if text == 'üì¶ –ö–ª–∞–¥–æ–≤–∞—è':
                show_storage_selection(chat_id)
            elif text == 'üìÖ –°–æ–±—ã—Ç–∏—è':
                user_states[chat_id] = 'events'
                bot.send_message(chat_id, "üìÖ *–°–æ–±—ã—Ç–∏—è*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", 
                               parse_mode='Markdown', reply_markup=create_events_keyboard())
            else:
                show_main_menu(chat_id)

        elif state == 'storage_selection':
            if text == 'üìç –ì—Ä–∏–Ω–±–æ–∫—Å 11':
                show_inventory(chat_id, '–ì—Ä–∏–Ω–±–æ–∫—Å 11')
            elif text == 'üìç –ì—Ä–∏–Ω–±–æ–∫—Å 12':
                show_inventory(chat_id, '–ì—Ä–∏–Ω–±–æ–∫—Å 12')
            elif text == 'üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
                show_main_menu(chat_id)
            else:
                show_storage_selection(chat_id)

        elif isinstance(state, tuple) and state[0] == 'storage':
            storage = state[1]
            if text == 'üîô –ù–∞–∑–∞–¥':
                show_storage_selection(chat_id)
            elif text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å':
                user_states[chat_id] = ('add_items', [], storage)
                bot.send_message(chat_id, "üìù *–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É):*\n(–Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–≤–æ–¥' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)",
                               parse_mode='Markdown', reply_markup=create_add_items_keyboard())
            elif text == '‚ûñ –£–¥–∞–ª–∏—Ç—å':
                user_states[chat_id] = ('delete_items', [], storage)
                inventory = get_inventory(storage)
                if inventory:
                    keyboard = create_item_keyboard(inventory, 'delete')
                    bot.send_message(chat_id, f"üóëÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è ({storage}):*",
                                   parse_mode='Markdown', reply_markup=keyboard)
                else:
                    bot.send_message(chat_id, "‚ö†Ô∏è –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç!", reply_markup=create_storage_keyboard())
                    show_inventory(chat_id, storage)
                    user_states[chat_id] = ('storage', storage)
            elif text == 'üéÅ –í—ã–¥–∞—Ç—å':
                user_states[chat_id] = ('give_who', storage)
                bot.send_message(chat_id, "üë§ *–ö–æ–º—É –≤—ã–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã?*\n(–Ω–∞–ø–∏—à–∏—Ç–µ –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è)",
                               parse_mode='Markdown', reply_markup=types.ReplyKeyboardRemove())
            elif text == '‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å':
                user_states[chat_id] = ('return_items', [], storage)
                inventory = get_inventory(storage)
                issued_items = [(item_id, item_name, owner, issued, _) for item_id, item_name, owner, issued, _ in inventory 
                               if issued == 1]
                logging.info(f"Issued items for return in {storage}: {issued_items}")
                if issued_items:
                    keyboard = create_item_keyboard(issued_items, 'return')
                    bot.send_message(chat_id, f"üì¶ *–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ ({storage}):*",
                                   parse_mode='Markdown', reply_markup=keyboard)
                else:
                    bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ—Ç –≤—ã–¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤!", reply_markup=create_storage_keyboard())
                    show_inventory(chat_id, storage)
                    user_states[chat_id] = ('storage', storage)
            elif text == 'üìã –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å':
                show_inventory(chat_id, storage)
            elif text == '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–≤–æ–¥':
                bot.send_message(chat_id, "‚ö†Ô∏è –í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–µ–∂–∏–º–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤!", 
                               parse_mode='Markdown', reply_markup=create_storage_keyboard())
                show_inventory(chat_id, storage)

        elif isinstance(state, tuple) and state[0] == 'add_items':
            items, storage = state[1], state[2]
            if text == '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–≤–æ–¥':
                if items:
                    bot.send_message(chat_id, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {len(items)}", 
                                   reply_markup=create_storage_keyboard())
                else:
                    bot.send_message(chat_id, "‚ÑπÔ∏è –ù–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞", 
                                   reply_markup=create_storage_keyboard())
                show_inventory(chat_id, storage)
                user_states[chat_id] = ('storage', storage)
            else:
                lines = text.split('\n')
                for line in lines:
                    line = line.strip()
                    if line:
                        item_id, existing_item = find_item_in_db(line, storage)
                        if existing_item is None:
                            item_name = ' '.join(line.split())
                            item_id = add_item(item_name, storage)
                            if item_id:
                                items.append((item_id, item_name))
                bot.send_message(chat_id, "üìù –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤–≤–æ–¥–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–≤–æ–¥'",
                               parse_mode='Markdown', reply_markup=create_add_items_keyboard())
                user_states[chat_id] = ('add_items', items, storage)

        elif isinstance(state, tuple) and state[0] == 'give_who':
            storage = state[1]
            if text and text.strip():
                recipient = ' '.join(text.strip().split())
                if len(recipient) > 50:
                    bot.send_message(chat_id, "‚ö†Ô∏è –ò–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ! –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤.", 
                                   parse_mode='Markdown', reply_markup=types.ReplyKeyboardRemove())
                    return
                user_states[chat_id] = ('give_items', recipient, [], storage)
                inventory = get_inventory(storage)
                available_items = [(item_id, item_name, owner, issued, _) for item_id, item_name, owner, issued, _ in inventory 
                                 if issued == 0]
                logging.info(f"Available items for {recipient} in {storage}: {available_items}")
                if available_items:
                    keyboard = create_item_keyboard(available_items, 'give')
                    bot.send_message(chat_id, f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: *{recipient}*\nüì¶ *–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –≤—ã–¥–∞—á–∏ ({storage}):*",
                                   parse_mode='Markdown', reply_markup=keyboard)
                else:
                    bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –≤—ã–¥–∞—á–∏!", 
                                   parse_mode='Markdown', reply_markup=create_storage_keyboard())
                    show_inventory(chat_id, storage)
                    user_states[chat_id] = ('storage', storage)
            else:
                bot.send_message(chat_id, "‚ö†Ô∏è –ò–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!", 
                               parse_mode='Markdown', reply_markup=types.ReplyKeyboardRemove())

        elif state == 'events':
            if text == 'üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
                show_main_menu(chat_id)
            elif text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ':
                user_states[chat_id] = 'add_event_name'
                bot.send_message(chat_id, "üìù *–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:*", 
                               parse_mode='Markdown', reply_markup=types.ReplyKeyboardRemove())
            elif text == 'üìÖ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–±—ã—Ç–∏—è':
                bot.send_message(chat_id, "üìÖ *–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:*", 
                               parse_mode='Markdown', reply_markup=create_period_keyboard())
            elif text == 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ':
                events = get_events()
                if events:
                    keyboard = create_event_keyboard(events, 'delete_event')
                    bot.send_message(chat_id, "üóëÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:*",
                                   parse_mode='Markdown', reply_markup=keyboard)
                else:
                    bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!", reply_markup=create_events_keyboard())
                    user_states[chat_id] = 'events'

        elif state == 'add_event_name':
            if text and text.strip():
                user_states[chat_id] = ('add_event_date', text)
                bot.send_message(chat_id, "üìÖ *–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15 —è–Ω–≤–∞—Ä—è 2025):*", 
                               parse_mode='Markdown', reply_markup=types.ReplyKeyboardRemove())
            else:
                bot.send_message(chat_id, "‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!", 
                               parse_mode='Markdown')
                user_states[chat_id] = 'add_event_name'

        elif isinstance(state, tuple) and state[0] == 'add_event_date':
            event_name = state[1]
            try:
                parts = text.strip().split()
                if len(parts) != 3:
                    raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã")
                day, month_str, year = parts
                day = int(day)
                month = MONTHS.get(month_str.lower())
                if not month:
                    raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞")
                year = int(year)
                event_date = f"{year}-{month:02d}-{day:02d}"
                datetime.strptime(event_date, '%Y-%m-%d')
                add_event(event_name, event_date)
                bot.send_message(chat_id, f"‚úÖ –°–æ–±—ã—Ç–∏–µ *{event_name}* –Ω–∞ {event_date} –¥–æ–±–∞–≤–ª–µ–Ω–æ!", 
                               parse_mode='Markdown', reply_markup=create_events_keyboard())
                user_states[chat_id] = 'events'
            except ValueError as e:
                bot.send_message(chat_id, f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç '–î–î –º–µ—Å—è—Ü –ì–ì–ì–ì' (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15 —è–Ω–≤–∞—Ä—è 2025): {str(e)}", 
                               parse_mode='Markdown')

    except Exception as e:
        logging.error(f"Error processing message from {chat_id}: {e}")
        bot.send_message(chat_id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", 
                        parse_mode='Markdown', reply_markup=create_main_menu_keyboard())
        show_main_menu(chat_id)

# Webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Render
@app.route('/')
def index():
    return "ü§ñ Telegram Bot is running!"

@app.route('/webhook', methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return ''
    else:
        return 'Invalid content type', 403

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –Ω–∞ Render
if __name__ == '__main__':
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ webhook'–∏
    bot.remove_webhook()
    time.sleep(1)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
    if WEBHOOK_URL:
        bot.set_webhook(url=f"{WEBHOOK_URL}/webhook")
        logging.info(f"Webhook set to: {WEBHOOK_URL}/webhook")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app.run(host='0.0.0.0', port=PORT, debug=False)
