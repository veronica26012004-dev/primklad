import sqlite3
import telebot
from telebot import types
import threading
import logging
import os
from dotenv import load_dotenv
import time
from datetime import datetime, timedelta
from uuid import uuid4

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(filename='bot.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv('BOT_TOKEN')
if not TOKEN:
    logging.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

bot = telebot.TeleBot(TOKEN)

# –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è thread-safe –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–î
db_lock = threading.Lock()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_database():
    with db_lock:
        conn = sqlite3.connect('inventory.db', check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS items (
                id TEXT PRIMARY KEY,
                item_name TEXT NOT NULL,
                owner TEXT,
                issued INTEGER DEFAULT 0
            )
        ''')
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS events (
                id TEXT PRIMARY KEY,
                event_name TEXT NOT NULL,
                event_date TEXT NOT NULL
            )
        ''')
        conn.commit()
        conn.close()

init_database()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
def normalize_text(text):
    return ' '.join(text.strip().split()).lower()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
def get_inventory():
    with db_lock:
        conn = sqlite3.connect('inventory.db', check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute('SELECT id, item_name, owner, issued FROM items')
        items = cursor.fetchall()
        conn.close()
        return items

def add_item(item_name):
    item_id = str(uuid4())
    with db_lock:
        conn = sqlite3.connect('inventory.db', check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute('INSERT INTO items (id, item_name, owner, issued) VALUES (?, ?, ?, ?)', 
                      (item_id, item_name, None, 0))
        conn.commit()
        conn.close()
    return item_id

def delete_item(item_id):
    with db_lock:
        conn = sqlite3.connect('inventory.db', check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute('DELETE FROM items WHERE id = ?', (item_id,))
        conn.commit()
        conn.close()

def update_item_owner(item_id, owner):
    with db_lock:
        conn = sqlite3.connect('inventory.db', check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute('UPDATE items SET owner = ?, issued = 1 WHERE id = ?', (owner, item_id))
        conn.commit()
        conn.close()

def mark_item_issued(item_id):
    with db_lock:
        conn = sqlite3.connect('inventory.db', check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute('UPDATE items SET issued = 1 WHERE id = ?', (item_id,))
        conn.commit()
        conn.close()

def return_item(item_id):
    with db_lock:
        conn = sqlite3.connect('inventory.db', check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute('UPDATE items SET owner = NULL, issued = 0 WHERE id = ?', (item_id,))
        conn.commit()
        conn.close()

def find_item_in_db(item_name):
    with db_lock:
        conn = sqlite3.connect('inventory.db', check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute('SELECT id, item_name FROM items')
        all_items = cursor.fetchall()
        conn.close()

        normalized_search = normalize_text(item_name)
        for item_id, db_item in all_items:
            if normalize_text(db_item) == normalized_search:
                return item_id, db_item
        return None, None

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–±—ã—Ç–∏—è–º–∏
def add_event(event_name, event_date):
    event_id = str(uuid4())
    with db_lock:
        conn = sqlite3.connect('inventory.db', check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute('INSERT INTO events (id, event_name, event_date) VALUES (?, ?, ?)',
                      (event_id, event_name, event_date))
        conn.commit()
        conn.close()
    return event_id

def get_events(period=None):
    with db_lock:
        conn = sqlite3.connect('inventory.db', check_same_thread=False)
        cursor = conn.cursor()
        query = 'SELECT id, event_name, event_date FROM events'
        if period == 'week':
            start_date = datetime.now().strftime('%Y-%m-%d')
            end_date = (datetime.now() + timedelta(days=7)).strftime('%Y-%m-%d')
            query += ' WHERE event_date BETWEEN ? AND ?'
            cursor.execute(query, (start_date, end_date))
        elif period == 'month':
            start_date = datetime.now().strftime('%Y-%m-%d')
            end_date = (datetime.now() + timedelta(days=30)).strftime('%Y-%m-%d')
            query += ' WHERE event_date BETWEEN ? AND ?'
            cursor.execute(query, (start_date, end_date))
        else:
            cursor.execute(query)
        events = cursor.fetchall()
        conn.close()
        return events

def delete_event(event_id):
    with db_lock:
        conn = sqlite3.connect('inventory.db', check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute('DELETE FROM events WHERE id = ?', (event_id,))
        conn.commit()
        conn.close()

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def create_main_menu_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        types.KeyboardButton('üì¶ –ö–ª–∞–¥–æ–≤–∞—è'),
        types.KeyboardButton('üìÖ –°–æ–±—ã—Ç–∏—è')
    ]
    keyboard.add(*buttons)
    return keyboard

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–ª–∞–¥–æ–≤–æ–π
def create_storage_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        types.KeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å'),
        types.KeyboardButton('‚ûñ –£–¥–∞–ª–∏—Ç—å'),
        types.KeyboardButton('üéÅ –í—ã–¥–∞—Ç—å'),
        types.KeyboardButton('‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å'),
        types.KeyboardButton('üìã –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å'),
        types.KeyboardButton('üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    ]
    keyboard.add(*buttons)
    return keyboard

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ–±—ã—Ç–∏–π
def create_events_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        types.KeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ'),
        types.KeyboardButton('üìÖ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–±—ã—Ç–∏—è'),
        types.KeyboardButton('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ'),
        types.KeyboardButton('üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    ]
    keyboard.add(*buttons)
    return keyboard

# –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤
def create_item_keyboard(items, action):
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    for item_id, item_name, _, _ in sorted(items, key=lambda x: x[1]):
        callback_data = f"{action}:{item_id}"
        keyboard.add(types.InlineKeyboardButton(text=item_name, callback_data=callback_data))
    keyboard.add(types.InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞", callback_data=f"{action}:cancel"))
    if action == 'give':
        keyboard.add(types.InlineKeyboardButton(text="‚úÖ –í—ã–¥–∞–Ω–æ", callback_data=f"{action}:done"))
    return keyboard

# –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–±—ã—Ç–∏–π
def create_event_keyboard(events, action):
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    for event_id, event_name, event_date in sorted(events, key=lambda x: x[2]):
        display_text = f"{event_name} ({event_date})"
        callback_data = f"{action}:{event_id}"
        keyboard.add(types.InlineKeyboardButton(text=display_text, callback_data=callback_data))
    keyboard.add(types.InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞", callback_data=f"{action}:cancel"))
    return keyboard

# –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ —Å–æ–±—ã—Ç–∏–π
def create_period_keyboard():
    keyboard = types.InlineKeyboardMarkup(row_width=3)
    buttons = [
        types.InlineKeyboardButton(text="–ù–µ–¥–µ–ª—è", callback_data="view_events:week"),
        types.InlineKeyboardButton(text="–ú–µ—Å—è—Ü", callback_data="view_events:month"),
        types.InlineKeyboardButton(text="–í—Å–µ", callback_data="view_events:all")
    ]
    keyboard.add(*buttons)
    keyboard.add(types.InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞", callback_data="view_events:cancel"))
    return keyboard

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def show_main_menu(chat_id):
    text = "üìã *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"
    bot.send_message(chat_id, text, parse_mode='Markdown', reply_markup=create_main_menu_keyboard())
    user_states[chat_id] = 'main_menu'

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
def show_inventory(chat_id):
    inventory = get_inventory()
    text = "üì¶ *–ò–ù–í–ï–ù–¢–ê–†–¨:*\n\n"
    if not inventory:
        text += "üì≠ –ü—É—Å—Ç–æ\n"
    else:
        available_count = 0
        given_count = 0
        for _, item_name, owner, issued in sorted(inventory, key=lambda x: x[1]):
            if owner is None and issued == 0:
                text += f"‚úÖ **{item_name}** - –¥–æ—Å—Ç—É–ø–µ–Ω\n"
                available_count += 1
            else:
                text += f"üî∏ {item_name} - {owner or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                given_count += 1
        text += f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {available_count} –¥–æ—Å—Ç—É–ø–Ω–æ, {given_count} –≤—ã–¥–∞–Ω–æ"
    bot.send_message(chat_id, text, parse_mode='Markdown', reply_markup=create_storage_keyboard())
    user_states[chat_id] = 'storage'

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
    logging.info(f"User {message.chat.id} started bot")
    welcome_text = "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ–º –∏ —Å–æ–±—ã—Ç–∏—è–º–∏!*\n\n"
    welcome_text += "üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã:*\n"
    welcome_text += "üì¶ –ö–ª–∞–¥–æ–≤–∞—è - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ–º\n"
    welcome_text += "üìÖ –°–æ–±—ã—Ç–∏—è - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è–º–∏"
    bot.send_message(message.chat.id, welcome_text, parse_mode='Markdown', reply_markup=create_main_menu_keyboard())
    show_main_menu(message.chat.id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    chat_id = call.message.chat.id
    data = call.data.split(':')
    action = data[0]
    param = data[1] if len(data) > 1 else None

    try:
        if action == 'give':
            if param == 'cancel':
                bot.delete_message(chat_id, call.message.message_id)
                bot.send_message(chat_id, "üëå –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é", reply_markup=create_storage_keyboard())
                show_inventory(chat_id)
                return
            elif param == 'done':
                state = user_states.get(chat_id, 'storage')
                if isinstance(state, tuple) and state[0] == 'give_items':
                    recipient = state[1]
                    selected_items = state[2]
                    for item_id in selected_items:
                        mark_item_issued(item_id)
                    bot.delete_message(chat_id, call.message.message_id)
                    bot.send_message(chat_id, f"‚úÖ –ü—Ä–µ–¥–º–µ—Ç—ã –≤—ã–¥–∞–Ω—ã *{recipient}*!",
                                   parse_mode='Markdown', reply_markup=create_storage_keyboard())
                    show_inventory(chat_id)
                    user_states[chat_id] = 'storage'
                    return
            state = user_states.get(chat_id, 'storage')
            if isinstance(state, tuple) and state[0] == 'give_items':
                recipient = state[1]
                selected_items = state[2]
                if param not in selected_items:
                    selected_items.append(param)
                user_states[chat_id] = ('give_items', recipient, selected_items)
                inventory = get_inventory()
                available_items = [(item_id, item_name, owner, issued) for item_id, item_name, owner, issued in inventory 
                                 if issued == 0 and item_id not in selected_items]
                if available_items:
                    keyboard = create_item_keyboard(available_items, 'give')
                    selected_text = ", ".join([item_name for item_id, item_name, _, _ in inventory 
                                             if item_id in selected_items]) or "–Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ"
                    bot.edit_message_text(
                        f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: *{recipient}*\nüì¶ *–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –≤—ã–¥–∞—á–∏* (–≤—ã–±—Ä–∞–Ω–æ: {selected_text}):",
                        chat_id, call.message.message_id, parse_mode='Markdown', reply_markup=keyboard)
                else:
                    bot.delete_message(chat_id, call.message.message_id)
                    bot.send_message(chat_id, "‚ö†Ô∏è –ë–æ–ª—å—à–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤!", reply_markup=create_storage_keyboard())
                    show_inventory(chat_id)

        elif action == 'delete':
            if param == 'cancel':
                bot.delete_message(chat_id, call.message.message_id)
                bot.send_message(chat_id, "üëå –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é", reply_markup=create_storage_keyboard())
                show_inventory(chat_id)
                return
            if param:
                delete_item(param)
                bot.delete_message(chat_id, call.message.message_id)
                bot.send_message(chat_id, f"‚úÖ –ü—Ä–µ–¥–º–µ—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è!",
                               parse_mode='Markdown', reply_markup=create_storage_keyboard())
                show_inventory(chat_id)

        elif action == 'return':
            if param == 'cancel':
                bot.delete_message(chat_id, call.message.message_id)
                bot.send_message(chat_id, "üëå –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é", reply_markup=create_storage_keyboard())
                show_inventory(chat_id)
                return
            elif param == 'all':
                inventory = get_inventory()
                returned_count = 0
                for item_id, _, _, issued in inventory:
                    if issued == 1:
                        return_item(item_id)
                        returned_count += 1
                bot.delete_message(chat_id, call.message.message_id)
                bot.send_message(chat_id, f"‚úÖ –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤: *{returned_count}*",
                               parse_mode='Markdown', reply_markup=create_storage_keyboard())
                show_inventory(chat_id)
            elif param:
                return_item(param)
                bot.delete_message(chat_id, call.message.message_id)
                bot.send_message(chat_id, f"‚úÖ –ü—Ä–µ–¥–º–µ—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å!",
                               parse_mode='Markdown', reply_markup=create_storage_keyboard())
                show_inventory(chat_id)

        elif action == 'view_events':
            if param == 'cancel':
                bot.delete_message(chat_id, call.message.message_id)
                bot.send_message(chat_id, "üëå –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é", reply_markup=create_events_keyboard())
                user_states[chat_id] = 'events'
                return
            events = get_events(param)
            if not events:
                bot.delete_message(chat_id, call.message.message_id)
                bot.send_message(chat_id, "üìÖ –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥!", reply_markup=create_events_keyboard())
                user_states[chat_id] = 'events'
                return
            text = f"üìÖ *–°–æ–±—ã—Ç–∏—è ({param if param != 'all' else '–≤—Å–µ'}):*\n\n"
            for _, event_name, event_date in sorted(events, key=lambda x: x[2]):
                text += f"üìå {event_name} - {event_date}\n"
            bot.edit_message_text(text, chat_id, call.message.message_id, parse_mode='Markdown', 
                                reply_markup=create_events_keyboard())
            user_states[chat_id] = 'events'

        elif action == 'delete_event':
            if param == 'cancel':
                bot.delete_message(chat_id, call.message.message_id)
                bot.send_message(chat_id, "üëå –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é", reply_markup=create_events_keyboard())
                user_states[chat_id] = 'events'
                return
            if param:
                delete_event(param)
                bot.delete_message(chat_id, call.message.message_id)
                bot.send_message(chat_id, f"‚úÖ –°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ!", reply_markup=create_events_keyboard())
                user_states[chat_id] = 'events'

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback –æ—Ç {chat_id}: {e}")
        bot.delete_message(chat_id, call.message.message_id)
        bot.send_message(chat_id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", 
                        reply_markup=create_main_menu_keyboard())
        show_main_menu(chat_id)

# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    chat_id = message.chat.id
    text = message.text.strip()
    state = user_states.get(chat_id, 'main_menu')

    try:
        if state == 'main_menu':
            if text == 'üì¶ –ö–ª–∞–¥–æ–≤–∞—è':
                user_states[chat_id] = 'storage'
                show_inventory(chat_id)
            elif text == 'üìÖ –°–æ–±—ã—Ç–∏—è':
                user_states[chat_id] = 'events'
                bot.send_message(chat_id, "üìÖ *–°–æ–±—ã—Ç–∏—è*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", 
                               parse_mode='Markdown', reply_markup=create_events_keyboard())
            else:
                show_main_menu(chat_id)

        elif state == 'storage':
            if text == 'üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
                show_main_menu(chat_id)
            elif text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å':
                user_states[chat_id] = ('add_items', [])
                bot.send_message(chat_id, "üìù *–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É):*\n(–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)",
                               parse_mode='Markdown', reply_markup=types.ReplyKeyboardRemove())
            elif text == '‚ûñ –£–¥–∞–ª–∏—Ç—å':
                user_states[chat_id] = 'delete'
                inventory = get_inventory()
                if inventory:
                    keyboard = create_item_keyboard(inventory, 'delete')
                    bot.send_message(chat_id, "üóëÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:*",
                                   parse_mode='Markdown', reply_markup=keyboard)
                else:
                    bot.send_message(chat_id, "‚ö†Ô∏è –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç!", reply_markup=create_storage_keyboard())
                    show_inventory(chat_id)
            elif text == 'üéÅ –í—ã–¥–∞—Ç—å':
                user_states[chat_id] = 'give_who'
                bot.send_message(chat_id, "üë§ *–ö–æ–º—É –≤—ã–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã?*\n(–Ω–∞–ø–∏—à–∏—Ç–µ –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è)",
                               parse_mode='Markdown', reply_markup=types.ReplyKeyboardRemove())
            elif text == '‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å':
                user_states[chat_id] = 'return_items'
                inventory = get_inventory()
                issued_items = [(item_id, item_name, owner, issued) for item_id, item_name, owner, issued in inventory 
                               if issued == 1]
                if issued_items:
                    keyboard = create_item_keyboard(issued_items, 'return')
                    keyboard.add(types.InlineKeyboardButton(text="üîÑ –í–µ—Ä–Ω—É—Ç—å –≤—Å–µ", callback_data="return:all"))
                    bot.send_message(chat_id, "üì¶ *–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞:*",
                                   parse_mode='Markdown', reply_markup=keyboard)
                else:
                    bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ—Ç –≤—ã–¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤!", reply_markup=create_storage_keyboard())
                    show_inventory(chat_id)
            elif text == 'üìã –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å':
                show_inventory(chat_id)

        elif isinstance(state, tuple) and state[0] == 'add_items':
            items = state[1]
            if text:
                lines = text.split('\n')
                for line in lines:
                    line = line.strip()
                    if line:
                        item_id, existing_item = find_item_in_db(line)
                        if existing_item is None:
                            item_name = ' '.join(line.split())
                            item_id = add_item(item_name)
                            items.append((item_id, item_name))
                bot.send_message(chat_id, "üìù –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤–≤–æ–¥–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è",
                               parse_mode='Markdown')
                user_states[chat_id] = ('add_items', items)
            else:
                if items:
                    bot.send_message(chat_id, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {len(items)}", 
                                   reply_markup=create_storage_keyboard())
                else:
                    bot.send_message(chat_id, "‚ÑπÔ∏è –ù–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞", 
                                   reply_markup=create_storage_keyboard())
                show_inventory(chat_id)

        elif state == 'give_who':
            if text:
                recipient = ' '.join(text.strip().split())
                user_states[chat_id] = ('give_items', recipient, [])
                inventory = get_inventory()
                available_items = [(item_id, item_name, owner, issued) for item_id, item_name, owner, issued in inventory 
                                 if issued == 0]
                if available_items:
                    keyboard = create_item_keyboard(available_items, 'give')
                    bot.send_message(chat_id, f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: *{recipient}*\nüì¶ *–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –≤—ã–¥–∞—á–∏:*",
                                   parse_mode='Markdown', reply_markup=keyboard)
                else:
                    bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –≤—ã–¥–∞—á–∏!", 
                                   reply_markup=create_storage_keyboard())
                    show_inventory(chat_id)

        elif state == 'events':
            if text == 'üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
                show_main_menu(chat_id)
            elif text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ':
                user_states[chat_id] = 'add_event_name'
                bot.send_message(chat_id, "üìù *–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:*", 
                               parse_mode='Markdown', reply_markup=types.ReplyKeyboardRemove())
            elif text == 'üìÖ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–±—ã—Ç–∏—è':
                bot.send_message(chat_id, "üìÖ *–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:*", 
                               parse_mode='Markdown', reply_markup=create_period_keyboard())
            elif text == 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ':
                events = get_events()
                if events:
                    keyboard = create_event_keyboard(events, 'delete_event')
                    bot.send_message(chat_id, "üóëÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:*",
                                   parse_mode='Markdown', reply_markup=keyboard)
                else:
                    bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!", reply_markup=create_events_keyboard())
                    user_states[chat_id] = 'events'

        elif state == 'add_event_name':
            if text:
                user_states[chat_id] = ('add_event_date', text)
                bot.send_message(chat_id, "üìÖ *–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è (–ì–ì–ì–ì-–ú–ú-–î–î):*", 
                               parse_mode='Markdown', reply_markup=types.ReplyKeyboardRemove())
            else:
                bot.send_message(chat_id, "‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!", 
                               parse_mode='Markdown')
                user_states[chat_id] = 'add_event_name'

        elif isinstance(state, tuple) and state[0] == 'add_event_date':
            event_name = state[1]
            try:
                datetime.strptime(text, '%Y-%m-%d')
                add_event(event_name, text)
                bot.send_message(chat_id, f"‚úÖ –°–æ–±—ã—Ç–∏–µ *{event_name}* –Ω–∞ {text} –¥–æ–±–∞–≤–ª–µ–Ω–æ!", 
                               parse_mode='Markdown', reply_markup=create_events_keyboard())
                user_states[chat_id] = 'events'
            except ValueError:
                bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î", 
                               parse_mode='Markdown')

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {chat_id}: {e}")
        bot.send_message(chat_id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", 
                        reply_markup=create_main_menu_keyboard())
        show_main_menu(chat_id)

# –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
def clean_old_states():
    while True:
        time.sleep(3600)
        current_time = time.time()
        for chat_id in list(user_states.keys()):
            if current_time - user_states.get(chat_id, {}).get('last_activity', 0) > 3600:
                del user_states[chat_id]

# –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
threading.Thread(target=clean_old_states, daemon=True).start()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    while True:
        try:
            bot.polling(none_stop=True)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ polling: {e}")
            time.sleep(5)
