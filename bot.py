–Ø –ø–æ–Ω—è–ª, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–ø—Ä–æ—Å—Ç–∏—Ç—å –≤—ã–¥–∞—á—É –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è, —á—Ç–æ–±—ã –≤–º–µ—Å—Ç–æ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å—Ç–æ –≤–≤–æ–¥–∏–ª –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è, –∞ –∑–∞—Ç–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –≤—ã–¥–∞—é—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é. –¢–∞–∫–∂–µ —É—á—Ç—É, —á—Ç–æ —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –¥–≤–µ –∫–ª–∞–¥–æ–≤—ã–µ (–ì—Ä–∏–Ω–±–æ–∫—Å 11 –∏ –ì—Ä–∏–Ω–±–æ–∫—Å 12), –¥–∞—Ç–∞ –≤–≤–æ–¥–∏—Ç—Å—è —Å–ª–æ–≤–∞–º–∏, –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–≤–æ–¥–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–≤–æ–¥". –Ø –æ–±–Ω–æ–≤–ª—é –∫–æ–¥, —á—Ç–æ–±—ã –ø—Ä–∏ –≤—ã–¥–∞—á–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏–ª —Ç–æ–ª—å–∫–æ –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è, –∞ –∑–∞—Ç–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ä–∞–∑—É –≤—ã–¥–∞—é—Ç—Å—è —ç—Ç–æ–º—É –ø–æ–ª—É—á–∞—Ç–µ–ª—é.

### –û—Å–Ω–æ–≤–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:
1. **–£–ø—Ä–æ—â–µ–Ω–∏–µ –≤—ã–¥–∞—á–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤**:
   - –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–µ–π—Å—Ç–≤–∏—è "üéÅ –í—ã–¥–∞—Ç—å" –±–æ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è.
   - –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É).
   - –ü—Ä–µ–¥–º–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–ª–∞–¥–æ–≤–æ–π, –≤—ã–¥–∞—é—Ç—Å—è —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø–æ–ª—É—á–∞—Ç–µ–ª—é.
   - –í–≤–æ–¥ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –∫–Ω–æ–ø–∫–æ–π "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–≤–æ–¥".
   - –ï—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –±–æ—Ç —Å–æ–æ–±—â–∞–µ—Ç –æ–± —ç—Ç–æ–º.

2. **–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π**:
   - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –¥–≤–µ –∫–ª–∞–¥–æ–≤—ã–µ (–ì—Ä–∏–Ω–±–æ–∫—Å 11 –∏ –ì—Ä–∏–Ω–±–æ–∫—Å 12).
   - –í–≤–æ–¥ –¥–∞—Ç—ã —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–î–î –º–µ—Å—è—Ü –ì–ì–ì–ì" (–Ω–∞–ø—Ä–∏–º–µ—Ä, "15 —è–Ω–≤–∞—Ä—è 2025").
   - –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–≤–æ–¥–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–≤–æ–¥".

3. **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π**:
   - –°–æ—Å—Ç–æ—è–Ω–∏–µ `give_who` —Ç–µ–ø–µ—Ä—å –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ `give_items`, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –≤—ã–¥–∞—á–∏.
   - –°–æ—Å—Ç–æ—è–Ω–∏–µ `give_items` —Ö—Ä–∞–Ω–∏—Ç –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏ –∫–ª–∞–¥–æ–≤—É—é.

–í–æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥:

```python
import sqlite3
import telebot
from telebot import types
import threading
import logging
import os
from datetime import datetime, timedelta
from uuid import uuid4
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv('BOT_TOKEN', '8464322471:AAE3QyJrHrCS8lwAj4jD8NLuOy5kYnToumM')
bot = telebot.TeleBot(TOKEN)

# –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è thread-safe –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–î
db_lock = threading.Lock()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –º–µ—Å—è—Ü–µ–≤ –≤ —á–∏—Å–ª–∞
MONTHS = {
    '—è–Ω–≤–∞—Ä—è': 1, '—Ñ–µ–≤—Ä–∞–ª—è': 2, '–º–∞—Ä—Ç–∞': 3, '–∞–ø—Ä–µ–ª—è': 4, '–º–∞—è': 5, '–∏—é–Ω—è': 6,
    '–∏—é–ª—è': 7, '–∞–≤–≥—É—Å—Ç–∞': 8, '—Å–µ–Ω—Ç—è–±—Ä—è': 9, '–æ–∫—Ç—è–±—Ä—è': 10, '–Ω–æ—è–±—Ä—è': 11, '–¥–µ–∫–∞–±—Ä—è': 12
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_database():
    with db_lock:
        conn = sqlite3.connect('inventory.db', check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS items (
                id TEXT PRIMARY KEY,
                item_name TEXT NOT NULL,
                owner TEXT,
                issued INTEGER DEFAULT 0,
                storage TEXT NOT NULL
            )
        ''')
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS events (
                id TEXT PRIMARY KEY,
                event_name TEXT NOT NULL,
                event_date TEXT NOT NULL
            )
        ''')
        conn.commit()
        conn.close()

init_database()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
def normalize_text(text):
    return ' '.join(text.strip().split()).lower()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
def get_inventory(storage=None):
    with db_lock:
        conn = sqlite3.connect('inventory.db', check_same_thread=False)
        cursor = conn.cursor()
        if storage:
            cursor.execute('SELECT id, item_name, owner, issued, storage FROM items WHERE storage = ?', (storage,))
        else:
            cursor.execute('SELECT id, item_name, owner, issued, storage FROM items')
        items = cursor.fetchall()
        conn.close()
        return items

def add_item(item_name, storage):
    item_id = str(uuid4())
    with db_lock:
        conn = sqlite3.connect('inventory.db', check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute('INSERT INTO items (id, item_name, owner, issued, storage) VALUES (?, ?, ?, ?, ?)', 
                      (item_id, item_name, None, 0, storage))
        conn.commit()
        conn.close()
    return item_id

def delete_item(item_id):
    with db_lock:
        conn = sqlite3.connect('inventory.db', check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute('DELETE FROM items WHERE id = ?', (item_id,))
        conn.commit()
        conn.close()

def update_item_owner(item_id, owner):
    with db_lock:
        conn = sqlite3.connect('inventory.db', check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute('UPDATE items SET owner = ?, issued = 1 WHERE id = ?', (owner, item_id))
        conn.commit()
        conn.close()

def return_item(item_id):
    with db_lock:
        conn = sqlite3.connect('inventory.db', check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute('UPDATE items SET owner = NULL, issued = 0 WHERE id = ?', (item_id,))
        conn.commit()
        conn.close()

def find_item_in_db(item_name, storage):
    with db_lock:
        conn = sqlite3.connect('inventory.db', check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute('SELECT id, item_name, issued FROM items WHERE storage = ?', (storage,))
        all_items = cursor.fetchall()
        conn.close()

        normalized_search = normalize_text(item_name)
        for item_id, db_item, issued in all_items:
            if normalize_text(db_item) == normalized_search and issued == 0:
                return item_id, db_item
        return None, None

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–±—ã—Ç–∏—è–º–∏
def add_event(event_name, event_date):
    event_id = str(uuid4())
    with db_lock:
        conn = sqlite3.connect('inventory.db', check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute('INSERT INTO events (id, event_name, event_date) VALUES (?, ?, ?)',
                      (event_id, event_name, event_date))
        conn.commit()
        conn.close()
    return event_id

def get_events(period=None):
    with db_lock:
        conn = sqlite3.connect('inventory.db', check_same_thread=False)
        cursor = conn.cursor()
        query = 'SELECT id, event_name, event_date FROM events'
        if period == 'week':
            start_date = datetime.now().strftime('%Y-%m-%d')
            end_date = (datetime.now() + timedelta(days=7)).strftime('%Y-%m-%d')
            query += ' WHERE event_date BETWEEN ? AND ?'
            cursor.execute(query, (start_date, end_date))
        elif period == 'month':
            start_date = datetime.now().strftime('%Y-%m-%d')
            end_date = (datetime.now() + timedelta(days=30)).strftime('%Y-%m-%d')
            query += ' WHERE event_date BETWEEN ? AND ?'
            cursor.execute(query, (start_date, end_date))
        else:
            cursor.execute(query)
        events = cursor.fetchall()
        conn.close()
        return events

def delete_event(event_id):
    with db_lock:
        conn = sqlite3.connect('inventory.db', check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute('DELETE FROM events WHERE id = ?', (event_id,))
        conn.commit()
        conn.close()

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def create_main_menu_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        types.KeyboardButton('üì¶ –ö–ª–∞–¥–æ–≤–∞—è'),
        types.KeyboardButton('üìÖ –°–æ–±—ã—Ç–∏—è')
    ]
    keyboard.add(*buttons)
    return keyboard

def create_storage_selection_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        types.KeyboardButton('üìç –ì—Ä–∏–Ω–±–æ–∫—Å 11'),
        types.KeyboardButton('üìç –ì—Ä–∏–Ω–±–æ–∫—Å 12'),
        types.KeyboardButton('üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    ]
    keyboard.add(*buttons)
    return keyboard

def create_storage_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        types.KeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å'),
        types.KeyboardButton('‚ûñ –£–¥–∞–ª–∏—Ç—å'),
        types.KeyboardButton('üéÅ –í—ã–¥–∞—Ç—å'),
        types.KeyboardButton('‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å'),
        types.KeyboardButton('üìã –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å'),
        types.KeyboardButton('üîô –ù–∞–∑–∞–¥')
    ]
    keyboard.add(*buttons)
    return keyboard

def create_events_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        types.KeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ'),
        types.KeyboardButton('üìÖ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–±—ã—Ç–∏—è'),
        types.KeyboardButton('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ'),
        types.KeyboardButton('üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    ]
    keyboard.add(*buttons)
    return keyboard

def create_add_items_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    buttons = [
        types.KeyboardButton('‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–≤–æ–¥')
    ]
    keyboard.add(*buttons)
    return keyboard

def create_item_keyboard(items, action):
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    for item_id, item_name, _, _, _ in sorted(items, key=lambda x: x[1]):
        callback_data = f"{action}:{item_id}"
        keyboard.add(types.InlineKeyboardButton(text=item_name, callback_data=callback_data))
    keyboard.add(types.InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞", callback_data=f"{action}:cancel"))
    return keyboard

def create_event_keyboard(events, action):
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    for event_id, event_name, event_date in sorted(events, key=lambda x: x[2]):
        display_text = f"{event_name} ({event_date})"
        callback_data = f"{action}:{event_id}"
        keyboard.add(types.InlineKeyboardButton(text=display_text, callback_data=callback_data))
    keyboard.add(types.InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞", callback_data=f"{action}:cancel"))
    return keyboard

def create_period_keyboard():
    keyboard = types.InlineKeyboardMarkup(row_width=3)
    buttons = [
        types.InlineKeyboardButton(text="–ù–µ–¥–µ–ª—è", callback_data="view_events:week"),
        types.InlineKeyboardButton(text="–ú–µ—Å—è—Ü", callback_data="view_events:month"),
        types.InlineKeyboardButton(text="–í—Å–µ", callback_data="view_events:all")
    ]
    keyboard.add(*buttons)
    keyboard.add(types.InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞", callback_data="view_events:cancel"))
    return keyboard

# –§—É–Ω–∫—Ü–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
def show_main_menu(chat_id):
    text = "üìã *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"
    bot.send_message(chat_id, text, parse_mode='Markdown', reply_markup=create_main_menu_keyboard())
    user_states[chat_id] = 'main_menu'

def show_storage_selection(chat_id):
    text = "üì¶ *–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞–¥–æ–≤—É—é:*"
    bot.send_message(chat_id, text, parse_mode='Markdown', reply_markup=create_storage_selection_keyboard())
    user_states[chat_id] = 'storage_selection'

def show_inventory(chat_id, storage):
    inventory = get_inventory(storage)
    text = f"üì¶ *–ò–ù–í–ï–ù–¢–ê–†–¨ ({storage}):*\n\n"
    if not inventory:
        text += "üì≠ –ü—É—Å—Ç–æ\n"
    else:
        available_count = 0
        given_count = 0
        for _, item_name, owner, issued, _ in sorted(inventory, key=lambda x: x[1]):
            if owner is None and issued == 0:
                text += f"‚úÖ **{item_name}** - –¥–æ—Å—Ç—É–ø–µ–Ω\n"
                available_count += 1
            else:
                text += f"üî∏ {item_name} - {owner or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                given_count += 1
        text += f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {available_count} –¥–æ—Å—Ç—É–ø–Ω–æ, {given_count} –≤—ã–¥–∞–Ω–æ"
    bot.send_message(chat_id, text, parse_mode='Markdown', reply_markup=create_storage_keyboard())
    user_states[chat_id] = ('storage', storage)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
    logging.info(f"User {message.chat.id} started bot")
    welcome_text = "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ–º –∏ —Å–æ–±—ã—Ç–∏—è–º–∏!*\n\n"
    welcome_text += "üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã:*\n"
    welcome_text += "üì¶ –ö–ª–∞–¥–æ–≤–∞—è - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ–º\n"
    welcome_text += "üìÖ –°–æ–±—ã—Ç–∏—è - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è–º–∏"
    bot.send_message(message.chat.id, welcome_text, parse_mode='Markdown', reply_markup=create_main_menu_keyboard())
    show_main_menu(message.chat.id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    chat_id = call.message.chat.id
    data = call.data.split(':')
    action = data[0]
    param = data[1] if len(data) > 1 else None

    try:
        if action == 'delete':
            state = user_states.get(chat_id, ('storage', None))
            storage = state[1] if isinstance(state, tuple) else None
            if param == 'cancel':
                bot.delete_message(chat_id, call.message.message_id)
                bot.send_message(chat_id, "üëå –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é", reply_markup=create_storage_keyboard())
                show_inventory(chat_id, storage)
                return
            if param:
                delete_item(param)
                bot.delete_message(chat_id, call.message.message_id)
                bot.send_message(chat_id, f"‚úÖ –ü—Ä–µ–¥–º–µ—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è!",
                               parse_mode='Markdown', reply_markup=create_storage_keyboard())
                show_inventory(chat_id, storage)

        elif action == 'return':
            state = user_states.get(chat_id, ('storage', None))
            storage = state[1] if isinstance(state, tuple) else None
            if param == 'cancel':
                bot.delete_message(chat_id, call.message.message_id)
                bot.send_message(chat_id, "üëå –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é", reply_markup=create_storage_keyboard())
                show_inventory(chat_id, storage)
                return
            elif param == 'all':
                inventory = get_inventory(storage)
                returned_count = 0
                for item_id, _, _, issued, _ in inventory:
                    if issued == 1:
                        return_item(item_id)
                        returned_count += 1
                bot.delete_message(chat_id, call.message.message_id)
                bot.send_message(chat_id, f"‚úÖ –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤: *{returned_count}*",
                               parse_mode='Markdown', reply_markup=create_storage_keyboard())
                show_inventory(chat_id, storage)
            elif param:
                return_item(param)
                bot.delete_message(chat_id, call.message.message_id)
                bot.send_message(chat_id, f"‚úÖ –ü—Ä–µ–¥–º–µ—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å!",
                               parse_mode='Markdown', reply_markup=create_storage_keyboard())
                show_inventory(chat_id, storage)

        elif action == 'view_events':
            if param == 'cancel':
                bot.delete_message(chat_id, call.message.message_id)
                bot.send_message(chat_id, "üëå –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é", reply_markup=create_events_keyboard())
                user_states[chat_id] = 'events'
                return
            events = get_events(param)
            if not events:
                bot.delete_message(chat_id, call.message.message_id)
                bot.send_message(chat_id, "üìÖ –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥!", reply_markup=create_events_keyboard())
                user_states[chat_id] = 'events'
                return
            text = f"üìÖ *–°–æ–±—ã—Ç–∏—è ({param if param != 'all' else '–≤—Å–µ'}):*\n\n"
            for _, event_name, event_date in sorted(events, key=lambda x: x[2]):
                text += f"üìå {event_name} - {event_date}\n"
            bot.edit_message_text(text, chat_id, call.message.message_id, parse_mode='Markdown', 
                                reply_markup=create_events_keyboard())
            user_states[chat_id] = 'events'

        elif action == 'delete_event':
            if param == 'cancel':
                bot.delete_message(chat_id, call.message.message_id)
                bot.send_message(chat_id, "üëå –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é", reply_markup=create_events_keyboard())
                user_states[chat_id] = 'events'
                return
            if param:
                delete_event(param)
                bot.delete_message(chat_id, call.message.message_id)
                bot.send_message(chat_id, f"‚úÖ –°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ!", reply_markup=create_events_keyboard())
                user_states[chat_id] = 'events'

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback –æ—Ç {chat_id}: {e}")
        bot.delete_message(chat_id, call.message.message_id)
        bot.send_message(chat_id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", 
                        reply_markup=create_main_menu_keyboard())
        show_main_menu(chat_id)

# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    chat_id = message.chat.id
    text = message.text.strip()
    state = user_states.get(chat_id, 'main_menu')

    try:
        if state == 'main_menu':
            if text == 'üì¶ –ö–ª–∞–¥–æ–≤–∞—è':
                show_storage_selection(chat_id)
            elif text == 'üìÖ –°–æ–±—ã—Ç–∏—è':
                user_states[chat_id] = 'events'
                bot.send_message(chat_id, "üìÖ *–°–æ–±—ã—Ç–∏—è*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", 
                               parse_mode='Markdown', reply_markup=create_events_keyboard())
            else:
                show_main_menu(chat_id)

        elif state == 'storage_selection':
            if text == 'üìç –ì—Ä–∏–Ω–±–æ–∫—Å 11':
                show_inventory(chat_id, '–ì—Ä–∏–Ω–±–æ–∫—Å 11')
            elif text == 'üìç –ì—Ä–∏–Ω–±–æ–∫—Å 12':
                show_inventory(chat_id, '–ì—Ä–∏–Ω–±–æ–∫—Å 12')
            elif text == 'üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
                show_main_menu(chat_id)
            else:
                show_storage_selection(chat_id)

        elif isinstance(state, tuple) and state[0] == 'storage':
            storage = state[1]
            if text == 'üîô –ù–∞–∑–∞–¥':
                show_storage_selection(chat_id)
            elif text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å':
                user_states[chat_id] = ('add_items', [], storage)
                bot.send_message(chat_id, "üìù *–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É):*\n(–Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–≤–æ–¥' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)",
                               parse_mode='Markdown', reply_markup=create_add_items_keyboard())
            elif text == '‚ûñ –£–¥–∞–ª–∏—Ç—å':
                user_states[chat_id] = ('delete', storage)
                inventory = get_inventory(storage)
                if inventory:
                    keyboard = create_item_keyboard(inventory, 'delete')
                    bot.send_message(chat_id, f"üóëÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è ({storage}):*",
                                   parse_mode='Markdown', reply_markup=keyboard)
                else:
                    bot.send_message(chat_id, "‚ö†Ô∏è –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç!", reply_markup=create_storage_keyboard())
                    show_inventory(chat_id, storage)
            elif text == 'üéÅ –í—ã–¥–∞—Ç—å':
                user_states[chat_id] = ('give_who', storage)
                bot.send_message(chat_id, "üë§ *–ö–æ–º—É –≤—ã–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã?*\n(–Ω–∞–ø–∏—à–∏—Ç–µ –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è)",
                               parse_mode='Markdown', reply_markup=types.ReplyKeyboardRemove())
            elif text == '‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å':
                user_states[chat_id] = ('return_items', storage)
                inventory = get_inventory(storage)
                issued_items = [(item_id, item_name, owner, issued, _) for item_id, item_name, owner, issued, _ in inventory 
                               if issued == 1]
                if issued_items:
                    keyboard = create_item_keyboard(issued_items, 'return')
                    keyboard.add(types.InlineKeyboardButton(text="üîÑ –í–µ—Ä–Ω—É—Ç—å –≤—Å–µ", callback_data="return:all"))
                    bot.send_message(chat_id, f"üì¶ *–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ ({storage}):*",
                                   parse_mode='Markdown', reply_markup=keyboard)
                else:
                    bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ—Ç –≤—ã–¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤!", reply_markup=create_storage_keyboard())
                    show_inventory(chat_id, storage)
            elif text == 'üìã –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å':
                show_inventory(chat_id, storage)
            elif text == '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–≤–æ–¥':
                bot.send_message(chat_id, "‚ö†Ô∏è –í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–µ–∂–∏–º–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –≤—ã–¥–∞—á–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤!", 
                               reply_markup=create_storage_keyboard())
                show_inventory(chat_id, storage)

        elif isinstance(state, tuple) and state[0] == 'add_items':
            items, storage = state[1], state[2]
            if text == '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–≤–æ–¥':
                if items:
                    bot.send_message(chat_id, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {len(items)}", 
                                   reply_markup=create_storage_keyboard())
                else:
                    bot.send_message(chat_id, "‚ÑπÔ∏è –ù–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞", 
                                   reply_markup=create_storage_keyboard())
                show_inventory(chat_id, storage)
            else:
                lines = text.split('\n')
                for line in lines:
                    line = line.strip()
                    if line:
                        item_id, existing_item = find_item_in_db(line, storage)
                        if existing_item is None:
                            item_name = ' '.join(line.split())
                            item_id = add_item(item_name, storage)
                            items.append((item_id, item_name))
                bot.send_message(chat_id, "üìù –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤–≤–æ–¥–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–≤–æ–¥'",
                               parse_mode='Markdown', reply_markup=create_add_items_keyboard())
                user_states[chat_id] = ('add_items', items, storage)

        elif isinstance(state, tuple) and state[0] == 'give_who':
            storage = state[1]
            if text:
                recipient = ' '.join(text.strip().split())
                user_states[chat_id] = ('give_items', recipient, [], storage)
                bot.send_message(chat_id, f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: *{recipient}*\nüì¶ *–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –≤—ã–¥–∞—á–∏ (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É, —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏–∑ {storage}):*\n(–Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–≤–æ–¥' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)",
                               parse_mode='Markdown', reply_markup=create_add_items_keyboard())
            else:
                bot.send_message(chat_id, "‚ö†Ô∏è –ò–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!", 
                               parse_mode='Markdown', reply_markup=types.ReplyKeyboardRemove())

        elif isinstance(state, tuple) and state[0] == 'give_items':
            recipient, issued_items, storage = state[1], state[2], state[3]
            if text == '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–≤–æ–¥':
                if issued_items:
                    bot.send_message(chat_id, f"‚úÖ –ü—Ä–µ–¥–º–µ—Ç—ã –≤—ã–¥–∞–Ω—ã *{recipient}*: {', '.join(issued_items)}", 
                                   reply_markup=create_storage_keyboard())
                else:
                    bot.send_message(chat_id, "‚ÑπÔ∏è –ù–µ –≤—ã–¥–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞", 
                                   reply_markup=create_storage_keyboard())
                show_inventory(chat_id, storage)
            else:
                lines = text.split('\n')
                not_found_items = []
                for line in lines:
                    line = line.strip()
                    if line:
                        item_id, item_name = find_item_in_db(line, storage)
                        if item_id and item_name:
                            update_item_owner(item_id, recipient)
                            issued_items.append(item_name)
                        else:
                            not_found_items.append(line)
                if not_found_items:
                    bot.send_message(chat_id, f"‚ö†Ô∏è –°–ª–µ–¥—É—é—â–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —É–∂–µ –≤—ã–¥–∞–Ω—ã: {', '.join(not_found_items)}",
                                   parse_mode='Markdown')
                bot.send_message(chat_id, "üìù –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤–≤–æ–¥–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–≤–æ–¥'",
                               parse_mode='Markdown', reply_markup=create_add_items_keyboard())
                user_states[chat_id] = ('give_items', recipient, issued_items, storage)

        elif state == 'events':
            if text == 'üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
                show_main_menu(chat_id)
            elif text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ':
                user_states[chat_id] = 'add_event_name'
                bot.send_message(chat_id, "üìù *–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:*", 
                               parse_mode='Markdown', reply_markup=types.ReplyKeyboardRemove())
            elif text == 'üìÖ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–±—ã—Ç–∏—è':
                bot.send_message(chat_id, "üìÖ *–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:*", 
                               parse_mode='Markdown', reply_markup=create_period_keyboard())
            elif text == 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ':
                events = get_events()
                if events:
                    keyboard = create_event_keyboard(events, 'delete_event')
                    bot.send_message(chat_id, "üóëÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:*",
                                   parse_mode='Markdown', reply_markup=keyboard)
                else:
                    bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!", reply_markup=create_events_keyboard())
                    user_states[chat_id] = 'events'

        elif state == 'add_event_name':
            if text:
                user_states[chat_id] = ('add_event_date', text)
                bot.send_message(chat_id, "üìÖ *–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15 —è–Ω–≤–∞—Ä—è 2025):*", 
                               parse_mode='Markdown', reply_markup=types.ReplyKeyboardRemove())
            else:
                bot.send_message(chat_id, "‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!", 
                               parse_mode='Markdown')
                user_states[chat_id] = 'add_event_name'

        elif isinstance(state, tuple) and state[0] == 'add_event_date':
            event_name = state[1]
            try:
                parts = text.strip().split()
                if len(parts) != 3:
                    raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã")
                day, month_str, year = parts
                day = int(day)
                month = MONTHS.get(month_str.lower())
                if not month:
                    raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞")
                year = int(year)
                event_date = f"{year}-{month:02d}-{day:02d}"
                datetime.strptime(event_date, '%Y-%m-%d')
                add_event(event_name, event_date)
                bot.send_message(chat_id, f"‚úÖ –°–æ–±—ã—Ç–∏–µ *{event_name}* –Ω–∞ {event_date} –¥–æ–±–∞–≤–ª–µ–Ω–æ!", 
                               parse_mode='Markdown', reply_markup=create_events_keyboard())
                user_states[chat_id] = 'events'
            except ValueError as e:
                bot.send_message(chat_id, f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç '–î–î –º–µ—Å—è—Ü –ì–ì–ì–ì' (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15 —è–Ω–≤–∞—Ä—è 2025): {str(e)}", 
                               parse_mode='Markdown')

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {chat_id}: {e}")
        bot.send_message(chat_id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", 
                        reply_markup=create_main_menu_keyboard())
        show_main_menu(chat_id)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    while True:
        try:
            bot.polling(none_stop=True)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ polling: {e}")
            time.sleep(5)
```

### –ö–ª—é—á–µ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:
1. **–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤—ã–¥–∞—á–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤**:
   - –ü—Ä–∏ –≤—ã–±–æ—Ä–µ "üéÅ –í—ã–¥–∞—Ç—å" –±–æ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è (—Å–æ—Å—Ç–æ—è–Ω–∏–µ `give_who`).
   - –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ `give_items`, –≥–¥–µ –≤–≤–æ–¥–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É).
   - –§—É–Ω–∫—Ü–∏—è `find_item_in_db` –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥–º–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–ª–∞–¥–æ–≤–æ–π –∏ –Ω–µ –≤—ã–¥–∞–Ω –ª–∏ –æ–Ω (`issued == 0`).
   - –ï—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç –Ω–∞–π–¥–µ–Ω, –æ–Ω —Å—Ä–∞–∑—É –≤—ã–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ `update_item_owner`.
   - –ï—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –≤—ã–¥–∞–Ω, –æ–Ω –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ —Å–ø–∏—Å–æ–∫ `not_found_items`, –∏ –±–æ—Ç —Å–æ–æ–±—â–∞–µ—Ç –æ–± —ç—Ç–æ–º.
   - –í–≤–æ–¥ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –∫–Ω–æ–ø–∫–æ–π "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–≤–æ–¥", –ø–æ—Å–ª–µ —á–µ–≥–æ –±–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –≤—ã–¥–∞—á—É –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–ª–∏ —Å–æ–æ–±—â–∞–µ—Ç, —á—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–¥–∞–Ω–æ.

2. **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ `find_item_in_db`**:
   - –¢–µ–ø–µ—Ä—å —Ñ—É–Ω–∫—Ü–∏—è —Ç–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø—Ä–µ–¥–º–µ—Ç –Ω–µ –≤—ã–¥–∞–Ω (`issued == 0`), —á—Ç–æ–±—ã –≤—ã–¥–∞–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã.

3. **–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π**:
   - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–≤—É—Ö –∫–ª–∞–¥–æ–≤—ã—Ö (–ì—Ä–∏–Ω–±–æ–∫—Å 11 –∏ –ì—Ä–∏–Ω–±–æ–∫—Å 12) —Å –ø–æ–ª–µ–º `storage` –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
   - –í–≤–æ–¥ –¥–∞—Ç—ã —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–î–î –º–µ—Å—è—Ü –ì–ì–ì–ì" —Å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º –≤ `–ì–ì–ì–ì-–ú–ú-–î–î` –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
   - –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–≤–æ–¥–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–≤–æ–¥".

4. **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π**:
   - –°–æ—Å—Ç–æ—è–Ω–∏–µ `give_who` —Ç–µ–ø–µ—Ä—å –∫–æ—Ä—Ç–µ–∂ `('give_who', storage)`.
   - –°–æ—Å—Ç–æ—è–Ω–∏–µ `give_items` —Ç–µ–ø–µ—Ä—å –∫–æ—Ä—Ç–µ–∂ `('give_items', recipient, issued_items, storage)`, –≥–¥–µ `issued_items` ‚Äî —Å–ø–∏—Å–æ–∫ –≤—ã–¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∏—Ç–æ–≥–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.

5. **–£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–Ω—É–∂–Ω–æ–≥–æ –∫–æ–¥–∞**:
   - –£–¥–∞–ª–µ–Ω—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è `give`, —Ç–∞–∫ –∫–∞–∫ –≤—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.

### –ü—Ä–∏–º–µ—á–∞–Ω–∏—è:
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –≤–≤–æ–¥–∏—Ç—å —Ç–æ—á–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤, –∫–∞–∫ –æ–Ω–∏ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (—Å —É—á–µ—Ç–æ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞, —Ç.–µ. –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ —Ä–µ–≥–∏—Å—Ç—Ä –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è).
- –ï—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –≤—ã–¥–∞–Ω, –±–æ—Ç –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫ `not_found_items` –∏ —Å–æ–æ–±—â–∞–µ—Ç –æ–± —ç—Ç–æ–º –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏.
- –ë–æ—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –º–µ–Ω—é –∫–ª–∞–¥–æ–≤–æ–π –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–≤–æ–¥–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –≤—ã–¥–∞—á–∏.
- –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ª–æ–≥–∏—Ä—É—é—Ç—Å—è, –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –±–æ—Ç–∞.
- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ö—Ä–∞–Ω–∏—Ç –ø—Ä–µ–¥–º–µ—Ç—ã —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–ª–∞–¥–æ–≤–æ–π (`storage`), –∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–ª–∞–¥–æ–≤–æ–π.

–ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ —á—Ç–æ-—Ç–æ –Ω—É–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏), –¥–∞–π—Ç–µ –∑–Ω–∞—Ç—å!
