import sqlite3
import telebot
from telebot import types
import threading
import logging
import os
from dotenv import load_dotenv
from flask import Flask, request
from datetime import datetime, timedelta
import urllib.parse

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv('BOT_TOKEN')
if not TOKEN:
    logging.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

WEBHOOK_URL = os.getenv('WEBHOOK_URL')
if not WEBHOOK_URL:
    logging.error("WEBHOOK_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    raise ValueError("WEBHOOK_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ Flask
bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è thread-safe –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–î
db_lock = threading.Lock()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_database():
    with db_lock:
        conn = sqlite3.connect('inventory.db', check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS inventory (
                item TEXT PRIMARY KEY,
                owner TEXT
            )
        ''')
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS events (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                event_name TEXT NOT NULL,
                event_date DATE NOT NULL
            )
        ''')
        conn.commit()
        conn.close()

init_database()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
def normalize_text(text):
    return ' '.join(text.strip().split()).lower()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ–º
def get_inventory():
    with db_lock:
        conn = sqlite3.connect('inventory.db', check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute('SELECT item, owner FROM inventory ORDER BY item')
        items = cursor.fetchall()
        conn.close()
        return {item: owner for item, owner in items}

def add_item(item_name):
    with db_lock:
        conn = sqlite3.connect('inventory.db', check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute('INSERT OR IGNORE INTO inventory (item, owner) VALUES (?, ?)', (item_name, None))
        conn.commit()
        conn.close()

def delete_item(item_name):
    with db_lock:
        conn = sqlite3.connect('inventory.db', check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute('DELETE FROM inventory WHERE item = ?', (item_name,))
        conn.commit()
        conn.close()

def update_item_owner(item_name, owner):
    with db_lock:
        conn = sqlite3.connect('inventory.db', check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute('UPDATE inventory SET owner = ? WHERE item = ?', (owner, item_name))
        conn.commit()
        conn.close()

def find_item_in_db(item_name):
    with db_lock:
        conn = sqlite3.connect('inventory.db', check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute('SELECT item FROM inventory')
        all_items = cursor.fetchall()
        conn.close()
        normalized_search = normalize_text(item_name)
        for (db_item,) in all_items:
            if normalize_text(db_item) == normalized_search:
                return db_item
        return None

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–±—ã—Ç–∏—è–º–∏
def add_event(event_name, event_date):
    with db_lock:
        conn = sqlite3.connect('inventory.db', check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute('INSERT INTO events (event_name, event_date) VALUES (?, ?)', (event_name, event_date))
        conn.commit()
        conn.close()

def get_events(start_date=None, end_date=None):
    with db_lock:
        conn = sqlite3.connect('inventory.db', check_same_thread=False)
        cursor = conn.cursor()
        if start_date and end_date:
            cursor.execute('SELECT id, event_name, event_date FROM events WHERE event_date BETWEEN ? AND ? ORDER BY event_date',
                           (start_date, end_date))
        else:
            cursor.execute('SELECT id, event_name, event_date FROM events ORDER BY event_date')
        events = cursor.fetchall()
        conn.close()
        return events

def delete_event(event_id):
    with db_lock:
        conn = sqlite3.connect('inventory.db', check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute('DELETE FROM events WHERE id = ?', (event_id,))
        conn.commit()
        conn.close()

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –º–µ–Ω—é
def create_start_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    keyboard.add(types.KeyboardButton('üì¶ –í–æ–π—Ç–∏ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å'))
    return keyboard

start_keyboard = create_start_keyboard()

# –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def create_main_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        types.KeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å'),
        types.KeyboardButton('‚ûñ –£–¥–∞–ª–∏—Ç—å'),
        types.KeyboardButton('üéÅ –í—ã–¥–∞—Ç—å'),
        types.KeyboardButton('‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å'),
        types.KeyboardButton('üìã –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å'),
        types.KeyboardButton('üóìÔ∏è –°–æ–±—ã—Ç–∏—è')
    ]
    keyboard.add(*buttons)
    return keyboard

main_keyboard = create_main_keyboard()

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é —Å–æ–±—ã—Ç–∏–π
def create_events_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        types.KeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ'),
        types.KeyboardButton('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ'),
        types.KeyboardButton('üìÖ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–±—ã—Ç–∏—è'),
        types.KeyboardButton('üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é')
    ]
    keyboard.add(*buttons)
    return keyboard

events_keyboard = create_events_keyboard()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
def create_item_keyboard(items, action):
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    for item in sorted(items):
        callback_data = f"{action}:{item}"
        keyboard.add(types.InlineKeyboardButton(text=item, callback_data=callback_data))
    keyboard.add(types.InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞", callback_data=f"{action}:cancel"))
    return keyboard

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —Å–æ–±—ã—Ç–∏—è–º–∏
def create_event_keyboard(events, action):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    for event_id, event_name, event_date in events:
        text = f"{event_name} ({event_date})"
        callback_data = f"{action}:{event_id}"
        keyboard.add(types.InlineKeyboardButton(text=text, callback_data=callback_data))
    keyboard.add(types.InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞", callback_data=f"{action}:cancel"))
    return keyboard

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def show_menu(chat_id):
    inventory = get_inventory()
    text = "üì¶ *–ò–ù–í–ï–ù–¢–ê–†–¨:*\n\n"
    if not inventory:
        text += "üì≠ –ü—É—Å—Ç–æ\n"
    else:
        available_count = 0
        given_count = 0
        for item, owner in sorted(inventory.items()):
            if owner is None:
                text += f"‚úÖ **{item}** - –¥–æ—Å—Ç—É–ø–µ–Ω\n"
                available_count += 1
            else:
                text += f"üî∏ {item} - {owner}\n"
                given_count += 1
        text += f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {available_count} –¥–æ—Å—Ç—É–ø–Ω–æ, {given_count} –≤—ã–¥–∞–Ω–æ"
    bot.send_message(chat_id, text, parse_mode='Markdown', reply_markup=main_keyboard)
    user_states[chat_id] = 'main'

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é —Å–æ–±—ã—Ç–∏–π
def show_events_menu(chat_id):
    bot.send_message(chat_id, "üóìÔ∏è *–ú–µ–Ω—é —Å–æ–±—ã—Ç–∏–π*", parse_mode='Markdown', reply_markup=events_keyboard)
    user_states[chat_id] = 'events_main'

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–æ–±—ã—Ç–∏–π
def show_events(chat_id, period='all'):
    today = datetime.now().date()
    if period == 'week':
        start_date = today
        end_date = today + timedelta(days=7)
    elif period == 'month':
        start_date = today
        end_date = today + timedelta(days=30)
    else:
        start_date = None
        end_date = None
    events = get_events(start_date, end_date)
    text = "üóìÔ∏è *–°–æ–±—ã—Ç–∏—è:*\n\n"
    if not events:
        text += "üì≠ –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π\n"
    else:
        for _, event_name, event_date in events:
            text += f"üìÖ {event_name} - {event_date}\n"
    bot.send_message(chat_id, text, parse_mode='Markdown', reply_markup=events_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
def handle_message(message):
    chat_id = message.chat.id
    text = message.text.strip()
    state = user_states.get(chat_id, 'start')

    try:
        if state == 'start':
            if text == 'üì¶ –í–æ–π—Ç–∏ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å':
                user_states[chat_id] = 'main'
                start_message = "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ–º!*\n\n"
                start_message += "üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
                start_message += "‚ûï –î–æ–±–∞–≤–∏—Ç—å - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç\n"
                start_message += "‚ûñ –£–¥–∞–ª–∏—Ç—å - —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç\n"
                start_message += "üéÅ –í—ã–¥–∞—Ç—å - –≤—ã–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç –∫–æ–º—É-—Ç–æ\n"
                start_message += "‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å - –≤–µ—Ä–Ω—É—Ç—å –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å\n"
                start_message += "üìã –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å - –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫\n"
                start_message += "üóìÔ∏è –°–æ–±—ã—Ç–∏—è - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è–º–∏"
                bot.send_message(chat_id, start_message, parse_mode='Markdown', reply_markup=main_keyboard)
                show_menu(chat_id)
            else:
                bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—Ö–æ–¥–∞.", reply_markup=start_keyboard)

        elif state == 'main':
            if text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å':
                user_states[chat_id] = 'add'
                bot.send_message(chat_id, "üìù *–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å?*\n(–Ω–∞–ø–∏—à–∏—Ç–µ '—Å—Ç–æ–ø' –¥–ª—è –≤—ã—Ö–æ–¥–∞)",
                               parse_mode='Markdown', reply_markup=types.ReplyKeyboardRemove())
            elif text == '‚ûñ –£–¥–∞–ª–∏—Ç—å':
                user_states[chat_id] = 'delete'
                inventory = get_inventory()
                if inventory:
                    keyboard = create_item_keyboard(inventory.keys(), 'delete')
                    bot.send_message(chat_id, "üóëÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:*",
                                   parse_mode='Markdown', reply_markup=keyboard)
                else:
                    bot.send_message(chat_id, "‚ö†Ô∏è –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç!", reply_markup=main_keyboard)
                    show_menu(chat_id)
            elif text == 'üéÅ –í—ã–¥–∞—Ç—å':
                user_states[chat_id] = 'give_who'
                bot.send_message(chat_id, "üë§ *–ö–æ–º—É –≤—ã–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç?*\n(–Ω–∞–ø–∏—à–∏—Ç–µ –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏–ª–∏ '—Å—Ç–æ–ø' –¥–ª—è –≤—ã—Ö–æ–¥–∞)",
                               parse_mode='Markdown', reply_markup=types.ReplyKeyboardRemove())
            elif text == '‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å':
                user_states[chat_id] = 'return_items'
                inventory = get_inventory()
                issued_items = [item for item, owner in inventory.items() if owner is not None]
                if issued_items:
                    keyboard = create_item_keyboard(issued_items, 'return')
                    keyboard.add(types.InlineKeyboardButton(text="üîÑ –í–µ—Ä–Ω—É—Ç—å –≤—Å–µ", callback_data="return:all"))
                    bot.send_message(chat_id, "üì¶ *–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞:*",
                                   parse_mode='Markdown', reply_markup=keyboard)
                else:
                    bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ—Ç –≤—ã–¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤!", reply_markup=main_keyboard)
                    show_menu(chat_id)
            elif text == 'üìã –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å':
                show_menu(chat_id)
            elif text == 'üóìÔ∏è –°–æ–±—ã—Ç–∏—è':
                show_events_menu(chat_id)
            else:
                show_menu(chat_id)

        elif state == 'add':
            if normalize_text(text) == '—Å—Ç–æ–ø':
                bot.send_message(chat_id, "üëå –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é", reply_markup=main_keyboard)
                show_menu(chat_id)
            elif text:
                existing_item = find_item_in_db(text)
                if existing_item is None:
                    item_name = ' '.join(text.strip().split())
                    add_item(item_name)
                    bot.send_message(chat_id, f"‚úÖ *{item_name}* –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å!\n–ß—Ç–æ –µ—â–µ –¥–æ–±–∞–≤–∏—Ç—å? (—Å—Ç–æ–ø –¥–ª—è –≤—ã—Ö–æ–¥–∞)",
                                   parse_mode='Markdown')
                else:
                    bot.send_message(chat_id, f"‚ö†Ô∏è *{existing_item}* —É–∂–µ –µ—Å—Ç—å –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ!\n–ß—Ç–æ –µ—â–µ –¥–æ–±–∞–≤–∏—Ç—å? (—Å—Ç–æ–ø –¥–ª—è –≤—ã—Ö–æ–¥–∞)",
                                   parse_mode='Markdown')

        elif state == 'give_who':
            if normalize_text(text) == '—Å—Ç–æ–ø':
                bot.send_message(chat_id, "üëå –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é", reply_markup=main_keyboard)
                show_menu(chat_id)
            elif text:
                recipient = ' '.join(text.strip().split())
                user_states[chat_id] = ('give_items', recipient)
                inventory = get_inventory()
                available_items = [item for item, owner in inventory.items() if owner is None]
                if available_items:
                    keyboard = create_item_keyboard(available_items, 'give')
                    bot.send_message(chat_id, f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: *{recipient}*\nüì¶ *–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –≤—ã–¥–∞—á–∏:*",
                                   parse_mode='Markdown', reply_markup=keyboard)
                else:
                    bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –≤—ã–¥–∞—á–∏!", reply_markup=main_keyboard)
                    show_menu(chat_id)

        elif state == 'events_main':
            if text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ':
                user_states[chat_id] = 'add_event_name'
                bot.send_message(chat_id, "üìù *–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:* (—Å—Ç–æ–ø –¥–ª—è –≤—ã—Ö–æ–¥–∞)",
                               parse_mode='Markdown', reply_markup=types.ReplyKeyboardRemove())
            elif text == 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ':
                user_states[chat_id] = 'delete_event'
                events = get_events()
                if events:
                    keyboard = create_event_keyboard(events, 'delete_event')
                    bot.send_message(chat_id, "üóëÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:*",
                                   parse_mode='Markdown', reply_markup=keyboard)
                else:
                    bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π!", reply_markup=events_keyboard)
                    show_events_menu(chat_id)
            elif text == 'üìÖ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–±—ã—Ç–∏—è':
                keyboard = types.InlineKeyboardMarkup(row_width=3)
                keyboard.add(
                    types.InlineKeyboardButton("–ù–∞ –Ω–µ–¥–µ–ª—é", callback_data="view_events:week"),
                    types.InlineKeyboardButton("–ù–∞ –º–µ—Å—è—Ü", callback_data="view_events:month"),
                    types.InlineKeyboardButton("–í—Å–µ", callback_data="view_events:all")
                )
                bot.send_message(chat_id, "üìÖ *–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:*",
                               parse_mode='Markdown', reply_markup=keyboard)
            elif text == 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é':
                bot.send_message(chat_id, "üëå –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_keyboard)
                show_menu(chat_id)
            else:
                show_events_menu(chat_id)

        elif state == 'add_event_name':
            if normalize_text(text) == '—Å—Ç–æ–ø':
                bot.send_message(chat_id, "üëå –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Å–æ–±—ã—Ç–∏–π", reply_markup=events_keyboard)
                show_events_menu(chat_id)
            elif text:
                event_name = ' '.join(text.strip().split())
                user_states[chat_id] = ('add_event_date', event_name)
                bot.send_message(chat_id, f"üìÖ *–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è* (—Ñ–æ—Ä–º–∞—Ç: YYYY-MM-DD):",
                               parse_mode='Markdown')

        elif isinstance(state, tuple) and state[0] == 'add_event_date':
            if normalize_text(text) == '—Å—Ç–æ–ø':
                bot.send_message(chat_id, "üëå –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Å–æ–±—ã—Ç–∏–π", reply_markup=events_keyboard)
                show_events_menu(chat_id)
            elif text:
                try:
                    event_date = datetime.strptime(text, '%Y-%m-%d').date()
                    event_name = state[1]
                    add_event(event_name, event_date)
                    bot.send_message(chat_id, f"‚úÖ –°–æ–±—ã—Ç–∏–µ *{event_name}* –Ω–∞ {event_date} –¥–æ–±–∞–≤–ª–µ–Ω–æ!",
                                   parse_mode='Markdown', reply_markup=events_keyboard)
                    show_events_menu(chat_id)
                except ValueError:
                    bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ (YYYY-MM-DD).")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {chat_id}: {e}")
        bot.send_message(chat_id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=main_keyboard)
        show_menu(chat_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
def handle_callback_query(call):
    chat_id = call.message.chat.id
    data = call.data.split(':')
    action = data[0]
    item_or_id = data[1] if len(data) > 1 else None

    try:
        if action == 'give':
            if item_or_id == 'cancel':
                bot.delete_message(chat_id, call.message.message_id)
                bot.send_message(chat_id, "üëå –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é", reply_markup=main_keyboard)
                show_menu(chat_id)
                return
            state = user_states.get(chat_id, 'main')
            if isinstance(state, tuple) and state[0] == 'give_items':
                recipient = state[1]
                inventory = get_inventory()
                if item_or_id in inventory:
                    if inventory[item_or_id] is None:
                        update_item_owner(item_or_id, recipient)
                        bot.delete_message(chat_id, call.message.message_id)
                        bot.send_message(chat_id, f"‚úÖ *{item_or_id}* –≤—ã–¥–∞–Ω *{recipient}*!",
                                       parse_mode='Markdown', reply_markup=main_keyboard)
                        show_menu(chat_id)
                    else:
                        bot.delete_message(chat_id, call.message.message_id)
                        bot.send_message(chat_id, f"‚ö†Ô∏è *{item_or_id}* —É–∂–µ –≤—ã–¥–∞–Ω *{inventory[item_or_id]}*!",
                                       parse_mode='Markdown', reply_markup=main_keyboard)
                        show_menu(chat_id)
        elif action == 'delete':
            if item_or_id == 'cancel':
                bot.delete_message(chat_id, call.message.message_id)
                bot.send_message(chat_id, "üëå –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é", reply_markup=main_keyboard)
                show_menu(chat_id)
                return
            if item_or_id:
                delete_item(item_or_id)
                bot.delete_message(chat_id, call.message.message_id)
                bot.send_message(chat_id, f"‚úÖ *{item_or_id}* —É–¥–∞–ª–µ–Ω –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è!",
                               parse_mode='Markdown', reply_markup=main_keyboard)
                show_menu(chat_id)
        elif action == 'return':
            if item_or_id == 'cancel':
                bot.delete_message(chat_id, call.message.message_id)
                bot.send_message(chat_id, "üëå –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é", reply_markup=main_keyboard)
                show_menu(chat_id)
                return
            elif item_or_id == 'all':
                inventory = get_inventory()
                returned_count = 0
                for item in inventory:
                    if inventory[item] is not None:
                        update_item_owner(item, None)
                        returned_count += 1
                bot.delete_message(chat_id, call.message.message_id)
                bot.send_message(chat_id, f"‚úÖ –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤: *{returned_count}*",
                               parse_mode='Markdown', reply_markup=main_keyboard)
                show_menu(chat_id)
            elif item_or_id:
                inventory = get_inventory()
                if item_or_id in inventory and inventory[item_or_id] is not None:
                    update_item_owner(item_or_id, None)
                    bot.delete_message(chat_id, call.message.message_id)
                    bot.send_message(chat_id, f"‚úÖ *{item_or_id}* –≤–æ–∑–≤—Ä–∞—â–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å!",
                                   parse_mode='Markdown', reply_markup=main_keyboard)
                    show_menu(chat_id)
                else:
                    bot.delete_message(chat_id, call.message.message_id)
                    bot.send_message(chat_id, f"‚ÑπÔ∏è *{item_or_id}* —É–∂–µ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ!",
                                   parse_mode='Markdown', reply_markup=main_keyboard)
                    show_menu(chat_id)
        elif action == 'delete_event':
            if item_or_id == 'cancel':
                bot.delete_message(chat_id, call.message.message_id)
                bot.send_message(chat_id, "üëå –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Å–æ–±—ã—Ç–∏–π", reply_markup=events_keyboard)
                show_events_menu(chat_id)
                return
            if item_or_id:
                delete_event(int(item_or_id))
                bot.delete_message(chat_id, call.message.message_id)
                bot.send_message(chat_id, f"‚úÖ –°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ!",
                               parse_mode='Markdown', reply_markup=events_keyboard)
                show_events_menu(chat_id)
        elif action == 'view_events':
            bot.delete_message(chat_id, call.message.message_id)
            period = item_or_id
            show_events(chat_id, period)
            show_events_menu(chat_id)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback –æ—Ç {chat_id}: {e}")
        bot.delete_message(chat_id, call.message.message_id)
        bot.send_message(chat_id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=main_keyboard)
        show_menu(chat_id)

# Flask-—Ä–æ—É—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook
@app.route('/' + TOKEN, methods=['POST'])
def webhook():
    try:
        update = telebot.types.Update.de_json(request.get_json())
        if update.message:
            handle_message(update.message)
        if update.callback_query:
            handle_callback_query(update.callback_query)
        return 'OK', 200
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ webhook: {e}")
        return 'Error', 500

# –†–æ—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
@app.route('/')
def index():
    return 'Bot is running', 200

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
def set_webhook():
    webhook_url = f"{WEBHOOK_URL}/{TOKEN}"
    bot.remove_webhook()
    success = bot.set_webhook(url=webhook_url)
    if success:
        logging.info(f"Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
    else:
        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook")
        raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook")

# –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def clean_old_states():
    while True:
        time.sleep(3600)  # –ö–∞–∂–¥—ã–µ 60 –º–∏–Ω—É—Ç
        current_time = time.time()
        for chat_id in list(user_states.keys()):
            if isinstance(user_states[chat_id], dict) and current_time - user_states[chat_id].get('last_activity', 0) > 3600:
                del user_states[chat_id]

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == '__main__':
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    threading.Thread(target=clean_old_states, daemon=True).start()
    set_webhook()
    port = int(os.getenv('PORT', 8443))  # –ò—Å–ø–æ–ª—å–∑—É–µ–º PORT –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ 8443
    logging.info(f"–ó–∞–ø—É—Å–∫ Flask –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    app.run(host='0.0.0.0', port=port, debug=False)
