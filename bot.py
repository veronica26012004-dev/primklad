import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import os
import json
import time
import requests
import urllib3
import unicodedata
import threading
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('bot.log')
    ]
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', '8188530872:AAGM4vmxCZIhS-0RY47RvYzS958NGe0J-VA').strip()
if not TOKEN:
    logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")
    raise RuntimeError("TELEGRAM_BOT_TOKEN is not set. Set env var and restart.")

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
SERMONS_FILE = 'sermons.txt'
NEEDS_FILE = 'needs.txt'
EVENTS_FILE = 'events.txt'

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
MISSION_TEXT = """\
üìú –ò—Ç–∞–∫ –º—ã - –ø–æ—Å–ª–∞–Ω–Ω–∏–∫–∏ –æ—Ç –∏–º–µ–Ω–∏ –•—Ä–∏—Å—Ç–æ–≤–∞, –∏ –∫–∞–∫ –±—ã –°–∞–º –ë–æ–≥ —É–≤–µ—â–µ–≤–∞–µ—Ç —á–µ—Ä–µ–∑ –Ω–∞—Å; –æ—Ç –∏–º–µ–Ω–∏ –•—Ä–∏—Å—Ç–æ–≤–∞ –ø—Ä–æ—Å–∏–º: –ø—Ä–∏–º–∏—Ä–∏—Ç–µ—Å—å —Å –ë–æ–≥–æ–º.(2–ö–æ—Ä.5:20)

–ë–æ–≥–æ—Å–ª—É–∂–µ–Ω–∏–µ üíí
üóìÔ∏è –ö–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
üïô —Å 10:00 –¥–æ 12:00
üìç –ø–æ –∞–¥—Ä–µ—Å—É: –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ù–∞—Ä–≤—Å–∫–∏–π –ø—Ä. 11–ë, –∞–∫—Ç–æ–≤—ã–π –∑–∞–ª (https://yandex.ru/maps/-/CLuSAS5Z)

üìé –°—Å—ã–ª–∫–∏ –Ω–∞ –Ω–∞—à–∏ —Å–æ—Ü —Å–µ—Ç–∏:

üìå –ú—ã –í–ö–æ–Ω—Ç–∞–∫—Ç–µ - https://vk.com/spbprim
üìå –ú—ã –Ω–∞ YouTube - https://www.youtube.com/@primirenie/videos?app=desktop
üìå –ú—ã –Ω–∞ Twitch - https://www.twitch.tv/primirenie(—Ç—É—Ç –∫–∞–∂–¥–æ–µ –≤—Å –ø—Ä–æ—Ö–æ–¥—è—Ç —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏)

–ú–µ—Å—Ç–Ω–∞—è —Ä–µ–ª–∏–≥–∏–æ–∑–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è "–¶–µ—Ä–∫–æ–≤—å –µ–≤–∞–Ω–≥–µ–ª—å—Å–∫–∏—Ö —Ö—Ä–∏—Å—Ç–∏–∞–Ω-–±–∞–ø—Ç–∏—Å—Ç–æ–≤ "–ü—Ä–∏–º–∏—Ä–µ–Ω–∏–µ" –û–ì–†–ù 1047831009192 –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –ì–ª–∞–≤–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–∞ —é—Å—Ç–∏—Ü–∏–∏ –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏ –ø–æ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥—É –∏ –õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏ 17.11.2004 –≥.
–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å (–ø–∞—Å—Ç–æ—Ä): –°–º–æ—Ç—Ä–æ–≤ –ê–ª–µ–∫—Å–µ–π –í–∞–ª–µ—Ä—å–µ–≤–∏—á.

ü§ç–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –º–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é –Ω–∞–º @primirenie_spb –∏–ª–∏ –∑–≤–æ–Ω–∏ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
+7 (993) 484-25-20
"""
MISSION_IMAGE = "hi.jpg"

HOW_TO_GET_TEXT = """\
–ö–∞–∫ –∫ –Ω–∞–º –¥–æ–±—Ä–∞—Ç—å—Å—è
–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –ø–æ –∞–¥—Ä–µ—Å—É: –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ù–∞—Ä–≤—Å–∫–∏–π –ø—Ä. 11–ë. –∞–∫—Ç–æ–≤—ã–π –∑–∞–ª (https://yandex.ru/maps/-/CLuSAS5Z)
–ë–ª–∏–∂–∞–π—à–∞—è —Å—Ç–∞–Ω—Ü–∏—è –º–µ—Ç—Ä–æ ‚Äî –ù–∞—Ä–≤—Å–∫–∞—è.
"""
HOW_TO_GET_IMAGE = "pyt.mp4"

HOME_GROUPS_TEXT = """\
–ö–û–ì–î–ê ?
–ö–∞–∂–¥—É—é —Å—Ä–µ–¥—É –≤ 19:00 (—É—Ç–æ—á–Ω—è–π—Ç–µ —É –ª–∏–¥–µ—Ä–∞ –≥—Ä—É–ø–ø—ã)

–ì–î–ï ?
üíú–ü—É—à–∫–∏–Ω
üíú–º. –ü—Ä–æ—Å–ø–µ–∫—Ç —Å–ª–∞–≤—ã
üíú–º. –£–¥–µ–ª—å–Ω–∞—è
üíú–º. –ö–æ–º–µ–Ω–¥–∞–Ω—Ç—Å–∫–∏–π/–ù–∞—Ä–≤—Å–∫–∞—è
üíú–º. –ø–ª–æ—â–∞–¥—å –ú—É–∂–µ—Å—Ç–≤–∞
üíú–º. –ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç
üíú–í–∞—Å–∏–ª—å–µ–≤—Å–∫–∏–π –æ—Å—Ç—Ä–æ–≤
üíú–º. –õ–∞–¥–æ–∂—Å–∫–∞—è

–ö–ê–ö ?
–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—Å—è –∫ –æ–¥–Ω–æ–π –∏–∑ –¥–æ–º–∞—à–Ω–∏—Ö –≥—Ä—É–ø–ø, –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –æ–±—Ä–∞—Ç–∏—Å—å –∫ –ø–∞—Å—Ç–æ—Ä—É –ê.–í. –°–º–æ—Ç—Ä–æ–≤—É!! ü§ç
"""
HOME_GROUPS_IMAGES = "dom.jpg"

CONTACT_TEXT = """\
üìû–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏
–ü–∏—à–∏—Ç–µ –Ω–∞ @primirenie_spb –∏–ª–∏ –∑–≤–æ–Ω–∏ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
+7 (993) 484-25-20
"""
CONTACT_IMAGE = ""

HELP_INTRO = """\
–ù—É–∂–¥—ã —Ü–µ—Ä–∫–≤–∏:
"""

# –§—É–Ω–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
def load_sermons():
    if os.path.exists(SERMONS_FILE):
        with open(SERMONS_FILE, 'r', encoding='utf-8') as f:
            content = f.read()
            try:
                data = json.loads(content)
                if isinstance(data, list):
                    normalized = []
                    for item in data:
                        if isinstance(item, dict):
                            normalized.append({
                                "link": str(item.get("link", "")),
                                "caption": str(item.get("caption", ""))
                            })
                        elif isinstance(item, (list, tuple)) and len(item) >= 2:
                            normalized.append({"link": str(item[0]), "caption": str(item[1])})
                    return normalized
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–ø–æ–≤–µ–¥–µ–π: {e}")
                pass
            lines = [line.rstrip("\n") for line in content.splitlines()]
            sermons = []
            for i in range(0, len(lines), 2):
                link = lines[i].strip()
                caption = lines[i+1] if i+1 < len(lines) else ''
                sermons.append({"link": link, "caption": caption})
            return sermons
    return []

def save_sermons(sermons):
    normalized = []
    for item in sermons:
        if isinstance(item, dict):
            normalized.append({
                "link": str(item.get("link", "")),
                "caption": str(item.get("caption", ""))
            })
        elif isinstance(item, (list, tuple)) and len(item) >= 2:
            normalized.append({"link": str(item[0]), "caption": str(item[1])})
    try:
        with open(SERMONS_FILE, 'w', encoding='utf-8') as f:
            json.dump(normalized, f, ensure_ascii=False, indent=2)
        logger.info("–ü—Ä–æ–ø–æ–≤–µ–¥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–ø–æ–≤–µ–¥–µ–π: {e}")

def load_needs():
    if os.path.exists(NEEDS_FILE):
        with open(NEEDS_FILE, 'r', encoding='utf-8') as f:
            lines = [line.strip() for line in f.readlines() if line.strip()]
            try:
                data = json.loads("\n".join(lines))
                if isinstance(data, list):
                    normalized = []
                    for item in data:
                        if isinstance(item, dict):
                            normalized.append({
                                "text": str(item.get("text", "")),
                                "assignee": item.get("assignee")
                            })
                        else:
                            normalized.append({"text": str(item), "assignee": None})
                    return normalized
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω—É–∂–¥: {e}")
                pass
            return [{"text": line, "assignee": None} for line in lines]
    return []

def save_needs(needs):
    normalized = []
    for need in needs:
        if isinstance(need, dict):
            normalized.append({
                "text": str(need.get("text", "")),
                "assignee": need.get("assignee")
            })
        else:
            normalized.append({"text": str(need), "assignee": None})
    try:
        with open(NEEDS_FILE, 'w', encoding='utf-8') as f:
            json.dump(normalized, f, ensure_ascii=False, indent=2)
        logger.info("–ù—É–∂–¥—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω—É–∂–¥: {e}")

def load_events():
    if os.path.exists(EVENTS_FILE):
        with open(EVENTS_FILE, 'r', encoding='utf-8') as f:
            try:
                data = json.load(f)
                if isinstance(data, list):
                    normalized = []
                    for item in data:
                        if isinstance(item, dict):
                            normalized.append({
                                "text": str(item.get("text", "")),
                                "photo_file_id": item.get("photo_file_id")
                            })
                        else:
                            normalized.append({"text": str(item), "photo_file_id": None})
                    return normalized
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π: {e}")
                pass
            f.seek(0)
            lines = [line.strip() for line in f.readlines() if line.strip()]
            return [{"text": line, "photo_file_id": None} for line in lines]
    return []

def save_events(events):
    normalized = []
    for ev in events:
        if isinstance(ev, dict):
            normalized.append({
                "text": str(ev.get("text", "")),
                "photo_file_id": ev.get("photo_file_id")
            })
        else:
            normalized.append({"text": str(ev), "photo_file_id": None})
    try:
        with open(EVENTS_FILE, 'w', encoding='utf-8') as f:
            json.dump(normalized, f, ensure_ascii=False, indent=2)
        logger.info("–°–æ–±—ã—Ç–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ
def is_bot_admin(chat_id):
    try:
        admins = bot.get_chat_administrators(chat_id)
        bot_id = bot.get_me().id
        is_admin = any(admin.user.id == bot_id for admin in admins)
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ {chat_id}: {'–∞–¥–º–∏–Ω' if is_admin else '–Ω–µ –∞–¥–º–∏–Ω'}")
        return is_admin
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ {chat_id}: {e}")
        return False

# –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–∫—Å–∏
try:
    proxy_url = os.getenv('TELEGRAM_PROXY_URL') or os.getenv('HTTPS_PROXY') or os.getenv('https_proxy') or os.getenv('HTTP_PROXY') or os.getenv('http_proxy')
    if proxy_url:
        import telebot.apihelper as apihelper
        apihelper.proxy = {
            'http': proxy_url,
            'https': proxy_url,
        }
        logger.info(f"–ü—Ä–æ–∫—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {proxy_url}")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏: {e}")

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–µ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def make_assignee_label_from_user(user):
    username = getattr(user, 'username', None)
    if username:
        return f"@{username}"
    name = (getattr(user, 'first_name', '') or '').strip()
    return name if name else f"id:{getattr(user, 'id', '')}"

def is_current_user_assignee(assignee_value, user):
    if not assignee_value:
        return False
    stored = str(assignee_value).strip()
    uid = str(getattr(user, 'id', ''))
    uname = getattr(user, 'username', None)
    fname = (getattr(user, 'first_name', '') or '').strip()
    candidates = set()
    if uid:
        candidates.add(f"id:{uid}")
    if uname:
        candidates.add(uname)
        candidates.add(f"@{uname}")
    if fname:
        candidates.add(fname)
    return stored in candidates

# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω—É–∂–¥ —Å –∫–Ω–æ–ø–∫–∞–º–∏
def build_needs_view(current_user, needs, is_admin):
    keyboard = InlineKeyboardMarkup()
    lines = []
    current_user_label = make_assignee_label_from_user(current_user)
    for idx, need in enumerate(needs):
        if isinstance(need, dict):
            assignee = need.get('assignee') or '—Å–≤–æ–±–æ–¥–Ω–æ'
            lines.append(f"‚Ä¢ {need.get('text', '')} ‚Äî {assignee}")
            is_taken = bool(need.get('assignee'))
            need_text = need.get('text', '')
            is_mine = is_taken and (need.get('assignee') == current_user_label or is_current_user_assignee(need.get('assignee'), current_user))
        else:
            lines.append(f"‚Ä¢ {need} ‚Äî —Å–≤–æ–±–æ–¥–Ω–æ")
            is_taken = False
            need_text = need
            is_mine = False

        def safe_short_label(text: str, max_len: int = 32) -> str:
            txt = (text or '').strip()
            if not txt:
                return '(–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è)'
            try:
                import regex as _re
                clusters = _re.findall(r'\X', txt)
                if len(clusters) <= max_len:
                    return txt
                return ''.join(clusters[: max_len - 1]) + '‚Ä¶'
            except Exception:
                if len(txt) <= max_len:
                    return txt
                cut = txt[: max_len - 1]
                while cut and (unicodedata.combining(cut[-1]) != 0 or cut[-1] in ('\u200d', '\ufe0f')):
                    cut = cut[:-1]
                return cut + '‚Ä¶'

        short_need = safe_short_label(need_text, 32)

        if is_admin:
            if is_taken:
                if is_mine:
                    keyboard.add(
                        InlineKeyboardButton(f"–û—Ç–∫–∞–∑–∞—Ç—å—Å—è: {short_need}", callback_data=f'release_need:{idx}'),
                        InlineKeyboardButton("‚ùå –û—Å–≤–æ–±–æ–¥–∏—Ç—å", callback_data=f'clear_need:{idx}'),
                        InlineKeyboardButton("üóë", callback_data=f'del_need:{idx}')
                    )
                else:
                    keyboard.add(
                        InlineKeyboardButton("‚ùå –û—Å–≤–æ–±–æ–¥–∏—Ç—å", callback_data=f'clear_need:{idx}'),
                        InlineKeyboardButton("üóë", callback_data=f'del_need:{idx}')
                    )
            else:
                keyboard.add(
                    InlineKeyboardButton(need_text, callback_data=f'need:{idx}'),
                    InlineKeyboardButton("üóë", callback_data=f'del_need:{idx}')
                )
        else:
            if not is_taken:
                keyboard.add(InlineKeyboardButton(need_text, callback_data=f'need:{idx}'))
            elif is_mine:
                keyboard.add(InlineKeyboardButton(f"–û—Ç–∫–∞–∑–∞—Ç—å—Å—è: {short_need}", callback_data=f'release_need:{idx}'))

    list_text = HELP_INTRO + "\n".join(lines)
    return list_text, keyboard

# –ê–¥–º–∏–Ω-—Ä–µ–∂–∏–º
ADMIN_SECRET = '–ê–¥–º–∏–Ω —Å–µ–∫—Ä–µ—Ç'
admin_user_ids = set()
admin_last_activity = {}
ADMIN_TIMEOUT_SECONDS = 3600

def escape_markdown_v2(text: str) -> str:
    if text is None:
        return ''
    specials = r"_ * [ ] ( ) ~ ` > # + - = | { } . !"
    result = []
    for ch in text:
        if ch in specials or ch == '\\':
            result.append('\\' + ch)
        else:
            result.append(ch)
    return ''.join(result)

def safe_send_markdown(chat_id, text, reply_markup=None, photo_path=None, video_path=None):
    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {text[:100]}...")
    try:
        if video_path and os.path.exists(video_path):
            with open(video_path, 'rb') as video:
                bot.send_video(chat_id, video, caption=text, reply_markup=reply_markup)
        elif photo_path and os.path.exists(photo_path):
            with open(photo_path, 'rb') as photo:
                bot.send_photo(chat_id, photo, caption=text, reply_markup=reply_markup)
        else:
            bot.send_message(chat_id, text, reply_markup=reply_markup)
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {e}")

def get_main_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("–ú–∏—Å—Å–∏—è —Ü–µ—Ä–∫–≤–∏"))
    keyboard.add(KeyboardButton("–ö–∞–∫ –∫ –Ω–∞–º –¥–æ–±—Ä–∞—Ç—å—Å—è"))
    keyboard.add(KeyboardButton("–î–æ–º–∞—à–Ω–∏–µ –≥—Ä—É–ø–ø—ã"))
    keyboard.add(KeyboardButton("–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏"))
    keyboard.add(KeyboardButton("–ü—Ä–æ–ø–æ–≤–µ–¥–∏"))
    keyboard.add(KeyboardButton("–ù—É–∂–¥—ã —Ü–µ—Ä–∫–≤–∏"))
    keyboard.add(KeyboardButton("–°–æ–±—ã—Ç–∏—è"))
    return keyboard

def get_admin_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("–ü—Ä–æ–ø–æ–≤–µ–¥–∏"))
    keyboard.add(KeyboardButton("–ù—É–∂–¥—ã —Ü–µ—Ä–∫–≤–∏"))
    keyboard.add(KeyboardButton("–°–æ–±—ã—Ç–∏—è"))
    keyboard.add(KeyboardButton("–í—ã—Ö–æ–¥"))
    return keyboard

def check_admin_timeout():
    while True:
        current_time = time.time()
        expired_admins = []
        for user_id, last_activity in admin_last_activity.items():
            if current_time - last_activity > ADMIN_TIMEOUT_SECONDS:
                expired_admins.append(user_id)

        for user_id in expired_admins:
            admin_user_ids.discard(user_id)
            admin_last_activity.pop(user_id, None)
            try:
                bot.send_message(user_id, "–í—ã –±—ã–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–≤–µ–¥–µ–Ω—ã –∏–∑ –∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º–∞ –∏–∑-–∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.", reply_markup=get_main_keyboard())
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–≤–µ–¥–µ–Ω –∏–∑ –∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º–∞")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑ –∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º–∞: {e}")
        time.sleep(60)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
    if message.from_user.id in admin_user_ids:
        admin_last_activity[message.from_user.id] = time.time()
        safe_send_markdown(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ê–¥–º–∏–Ω-–º–µ–Ω—é –¥–æ—Å—Ç—É–ø–Ω–æ:", reply_markup=get_admin_keyboard())
    else:
        safe_send_markdown(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=get_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ, –≥–¥–µ –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º
@bot.message_handler(content_types=['text', 'photo'], func=lambda message: message.chat.type in ['channel'])
def handle_channel_message(message):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ {message.chat.id} (username: {message.chat.username})")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–æ—Ç –∞–¥–º–∏–Ω–æ–º –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ
    if not is_bot_admin(message.chat.id):
        logger.info(f"–ë–æ—Ç –Ω–µ –∞–¥–º–∏–Ω –≤ –∫–∞–Ω–∞–ª–µ {message.chat.id}, —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ö—ç—à—Ç–µ–≥–∞ #—Å–æ–±—ã—Ç–∏–µ
    hashtag = '#—Å–æ–±—ã—Ç–∏–µ'
    text = message.text or message.caption or ''
    
    if hashtag.lower() in text.lower():
        logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω —Ö—ç—à—Ç–µ–≥ #—Å–æ–±—ã—Ç–∏–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏–∑ –∫–∞–Ω–∞–ª–∞ {message.chat.id}")
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏ —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        event_text = text.replace(hashtag, '').strip()
        photo_id = None
        if message.photo:
            photo_id = message.photo[-1].file_id
            logger.info(f"–§–æ—Ç–æ –Ω–∞–π–¥–µ–Ω–æ, file_id: {photo_id}")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è
        events = load_events()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
        event_data = {
            "text": event_text if event_text else "üìÖ –°–æ–±—ã—Ç–∏–µ",
            "photo_file_id": photo_id
        }
        events.append(event_data)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏—è
        save_events(events)
        logger.info(f"–°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {event_data}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª
        try:
            bot.send_message(
                message.chat.id,
                f"–°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–æ—Ç: {event_text or 'üìÖ –°–æ–±—ã—Ç–∏–µ'}",
                reply_to_message_id=message.message_id
            )
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª {message.chat.id}")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª {message.chat.id}: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_id = message.from_user.id
    text = message.text.strip()

    if user_id in admin_user_ids:
        admin_last_activity[user_id] = time.time()

    if text == ADMIN_SECRET:
        admin_user_ids.add(user_id)
        admin_last_activity[user_id] = time.time()
        safe_send_markdown(
            message.chat.id,
            "–ê–¥–º–∏–Ω-—Ä–µ–∂–∏–º –≤–∫–ª—é—á—ë–Ω. –î–æ—Å—Ç—É–ø–Ω–æ –∞–¥–º–∏–Ω-–º–µ–Ω—é.",
            reply_markup=get_admin_keyboard()
        )
        return

    if text.lower() in ("–≤—ã—Ö–æ–¥", "–≤—ã—Ö–æ–¥ –∞–¥–º–∏–Ω", "–≤—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∞"):
        if user_id in admin_user_ids:
            admin_user_ids.discard(user_id)
            admin_last_activity.pop(user_id, None)
            try:
                bot.edit_message_reply_markup(message.chat.id, message.message_id, reply_markup=None)
            except Exception:
                pass
            safe_send_markdown(
                message.chat.id,
                "–ê–¥–º–∏–Ω-—Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω.",
                reply_markup=get_main_keyboard()
            )
        else:
            safe_send_markdown(
                message.chat.id,
                "–í—ã –Ω–µ –≤ –∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º–µ.",
                reply_markup=get_main_keyboard()
            )
        return

    if text == "–ú–∏—Å—Å–∏—è —Ü–µ—Ä–∫–≤–∏":
        safe_send_markdown(message.chat.id, MISSION_TEXT, photo_path=MISSION_IMAGE)

    elif text == "–ö–∞–∫ –∫ –Ω–∞–º –¥–æ–±—Ä–∞—Ç—å—Å—è":
        safe_send_markdown(message.chat.id, HOW_TO_GET_TEXT, video_path=HOW_TO_GET_IMAGE)

    elif text == "–î–æ–º–∞—à–Ω–∏–µ –≥—Ä—É–ø–ø—ã":
        safe_send_markdown(message.chat.id, HOME_GROUPS_TEXT, photo_path=HOME_GROUPS_IMAGES)

    elif text == "–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏":
        safe_send_markdown(message.chat.id, CONTACT_TEXT, photo_path=CONTACT_IMAGE)

    elif text == "–ü—Ä–æ–ø–æ–≤–µ–¥–∏":
        sermons = load_sermons()
        if not sermons:
            kb = InlineKeyboardMarkup() if user_id in admin_user_ids else None
            if user_id in admin_user_ids:
                kb.add(InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–ø–æ–≤–µ–¥—å", callback_data='add_sermon'))
            safe_send_markdown(message.chat.id, "–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–ø–æ–≤–µ–¥–µ–π.", reply_markup=kb)
        else:
            for idx, s in enumerate(sermons):
                link = s.get('link', '') if isinstance(s, dict) else str(s[0])
                caption = s.get('caption', '') if isinstance(s, dict) else str(s[1])
                formatted_message = f"{caption}\n{link}" if caption else link
                kb = InlineKeyboardMarkup() if user_id in admin_user_ids else None
                if user_id in admin_user_ids:
                    kb.add(InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f'del_sermon:{idx}'))
                safe_send_markdown(message.chat.id, formatted_message, reply_markup=kb)
            if user_id in admin_user_ids:
                kb = InlineKeyboardMarkup()
                kb.add(InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–ø–æ–≤–µ–¥—å", callback_data='add_sermon'))
                safe_send_markdown(message.chat.id, "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø—Ä–æ–ø–æ–≤–µ–¥—å:", reply_markup=kb)

    elif text == "–ù—É–∂–¥—ã —Ü–µ—Ä–∫–≤–∏":
        needs = load_needs()
        is_admin = user_id in admin_user_ids
        list_text, keyboard = build_needs_view(message.from_user, needs, is_admin)
        safe_send_markdown(message.chat.id, list_text, reply_markup=keyboard)
        if is_admin:
            kb = InlineKeyboardMarkup()
            kb.add(InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω—É–∂–¥—É", callback_data='add_need'))
            safe_send_markdown(message.chat.id, "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –Ω—É–∂–¥—É:", reply_markup=kb)

    elif text == "–°–æ–±—ã—Ç–∏—è":
        events = load_events()
        if not events:
            kb = InlineKeyboardMarkup() if user_id in admin_user_ids else None
            if user_id in admin_user_ids:
                kb.add(InlineKeyboardButton("üìÖ –ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ", callback_data='add_event'))
            safe_send_markdown(message.chat.id, "–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.", reply_markup=kb)
        else:
            for idx, ev in enumerate(events):
                ev_text = ev.get('text', '') if isinstance(ev, dict) else str(ev)
                photo_id = ev.get('photo_file_id') if isinstance(ev, dict) else None
                display_text = ev_text if ev_text.strip() else "üìÖ –°–æ–±—ã—Ç–∏–µ"
                kb = InlineKeyboardMarkup() if user_id in admin_user_ids else None
                if user_id in admin_user_ids:
                    kb.add(InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f'del_event:{idx}'))
                if photo_id:
                    try:
                        bot.send_photo(message.chat.id, photo_id, caption=display_text, reply_markup=kb)
                    except Exception:
                        safe_send_markdown(message.chat.id, display_text, reply_markup=kb)
                else:
                    safe_send_markdown(message.chat.id, display_text, reply_markup=kb)
            if user_id in admin_user_ids:
                kb = InlineKeyboardMarkup()
                kb.add(InlineKeyboardButton("üìÖ –ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ", callback_data='add_event'))
                safe_send_markdown(message.chat.id, "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ:", reply_markup=kb)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ–ø–æ–≤–µ–¥—å
def add_sermon_link(message):
    link = message.text.strip()
    safe_send_markdown(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–æ–¥–ø–∏—Å—å –∫ –≤–∏–¥–µ–æ:")
    bot.register_next_step_handler(message, lambda m: add_sermon_caption(m, link))

def add_sermon_caption(message, link):
    caption = message.text.strip()
    sermons = load_sermons()
    sermons.append({"link": link, "caption": caption})
    save_sermons(sermons)
    safe_send_markdown(message.chat.id, "–ü—Ä–æ–ø–æ–≤–µ–¥—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")

def add_need(message):
    need = message.text.strip()
    needs = load_needs()
    needs.append({"text": need, "assignee": None})
    save_needs(needs)
    safe_send_markdown(message.chat.id, "–ù—É–∂–¥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")

def add_event_start(message):
    ev_text = (message.text or '').strip()
    temp = {"text": ev_text, "photo_file_id": None}
    safe_send_markdown(message.chat.id, "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Å–æ–±—ã—Ç–∏—è (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å').")
    bot.register_next_step_handler(message, lambda m: add_event_finish(m, temp))

def add_event_finish(message, temp):
    photo_id = None
    if message.content_type == 'photo' and message.photo:
        try:
            photo_id = message.photo[-1].file_id
        except Exception:
            photo_id = None
    elif isinstance(message.text, str) and message.text.strip().lower() == '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        photo_id = None
    else:
        photo_id = None
    events = load_events()
    events.append({"text": temp.get("text", ""), "photo_file_id": photo_id})
    save_events(events)
    safe_send_markdown(message.chat.id, "–°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@bot.callback_query_handler(func=lambda call: True)
def handle_help_callback(call):
    user_id = call.from_user.id
    if user_id in admin_user_ids:
        admin_last_activity[user_id] = time.time()

    data = call.data
    try:
        if data.startswith('del_sermon:'):
            if user_id not in admin_user_ids:
                bot.answer_callback_query(call.id, "–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞")
                return
            idx = int(data.split(':', 1)[1])
            sermons = load_sermons()
            if 0 <= idx < len(sermons):
                removed = sermons.pop(idx)
                save_sermons(sermons)
                bot.answer_callback_query(call.id, "–ü—Ä–æ–ø–æ–≤–µ–¥—å —É–¥–∞–ª–µ–Ω–∞")
                bot.edit_message_text("–£–¥–∞–ª–µ–Ω–æ", call.message.chat.id, call.message.message_id, parse_mode='MarkdownV2')
            else:
                bot.answer_callback_query(call.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å")
        elif data == 'add_sermon':
            if user_id not in admin_user_ids:
                bot.answer_callback_query(call.id, "–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞")
                return
            bot.answer_callback_query(call.id)
            safe_send_markdown(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –ø—Ä–æ–ø–æ–≤–µ–¥–∏:")
            bot.register_next_step_handler(call.message, add_sermon_link)
        elif data.startswith('del_event:'):
            if user_id not in admin_user_ids:
                bot.answer_callback_query(call.id, "–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞")
                return
            idx = int(data.split(':', 1)[1])
            events = load_events()
            if 0 <= idx < len(events):
                events.pop(idx)
                save_events(events)
                bot.answer_callback_query(call.id, "–°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ")
                try:
                    bot.edit_message_text("–£–¥–∞–ª–µ–Ω–æ", call.message.chat.id, call.message.message_id)
                except Exception:
                    pass
            else:
                bot.answer_callback_query(call.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å")
        elif data == 'add_event':
            if user_id not in admin_user_ids:
                bot.answer_callback_query(call.id, "–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞")
                return
            bot.answer_callback_query(call.id)
            safe_send_markdown(call.message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–±—ã—Ç–∏—è –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º ‚Äî —è –ø—Ä–∏–∫—Ä–µ–ø–ª—é –µ–≥–æ.")
            bot.register_next_step_handler(call.message, add_event_start)
        elif data.startswith('del_need:'):
            if user_id not in admin_user_ids:
                bot.answer_callback_query(call.id, "–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞")
                return
            idx = int(data.split(':', 1)[1])
            needs = load_needs()
            if 0 <= idx < len(needs):
                removed = needs.pop(idx)
                save_needs(needs)
                bot.answer_callback_query(call.id, "–ù—É–∂–¥–∞ —É–¥–∞–ª–µ–Ω–∞")
                list_text, keyboard = build_needs_view(call.from_user, needs, user_id in admin_user_ids)
                try:
                    bot.edit_message_text(list_text, call.message.chat.id, call.message.message_id)
                    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=keyboard)
                except Exception:
                    pass
            else:
                bot.answer_callback_query(call.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å")
        elif data == 'add_need':
            if user_id not in admin_user_ids:
                bot.answer_callback_query(call.id, "–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞")
                return
            bot.answer_callback_query(call.id)
            safe_send_markdown(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–π –Ω—É–∂–¥—ã:")
            bot.register_next_step_handler(call.message, add_need)
        elif data.startswith('need:'):
            idx = int(data.split(':', 1)[1])
            needs = load_needs()
            if 0 <= idx < len(needs):
                if isinstance(needs[idx], dict):
                    need_obj = needs[idx]
                    if need_obj.get('assignee'):
                        bot.answer_callback_query(call.id, "–≠—Ç–∞ –Ω—É–∂–¥–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞")
                        return
                    assignee_label = make_assignee_label_from_user(call.from_user)
                    need_obj['assignee'] = assignee_label
                    needs[idx] = need_obj
                else:
                    assignee_label = make_assignee_label_from_user(call.from_user)
                    need_text = str(needs[idx])
                    needs[idx] = {"text": need_text, "assignee": assignee_label}
                save_needs(needs)
                bot.answer_callback_query(call.id, "–í—ã –≤–∑—è–ª–∏ —ç—Ç—É –Ω—É–∂–¥—É. –°–ø–∞—Å–∏–±–æ!")
                list_text, keyboard = build_needs_view(call.from_user, needs, user_id in admin_user_ids)
                try:
                    bot.edit_message_text(list_text, call.message.chat.id, call.message.message_id)
                    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=keyboard)
                except Exception:
                    pass
            else:
                bot.answer_callback_query(call.id, "–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        elif data.startswith('clear_need:'):
            if user_id not in admin_user_ids:
                bot.answer_callback_query(call.id, "–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞")
                return
            idx = int(data.split(':', 1)[1])
            needs = load_needs()
            if 0 <= idx < len(needs):
                if isinstance(needs[idx], dict):
                    needs[idx]['assignee'] = None
                save_needs(needs)
                bot.answer_callback_query(call.id, "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω")
                list_text, keyboard = build_needs_view(call.from_user, needs, user_id in admin_user_ids)
                try:
                    bot.edit_message_text(list_text, call.message.chat.id, call.message.message_id)
                    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=keyboard)
                except Exception:
                    pass
            else:
                bot.answer_callback_query(call.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å")
        elif data.startswith('release_need:'):
            idx = int(data.split(':', 1)[1])
            needs = load_needs()
            if 0 <= idx < len(needs):
                if isinstance(needs[idx], dict) and needs[idx].get('assignee'):
                    current_label = make_assignee_label_from_user(call.from_user)
                    if needs[idx]['assignee'] == current_label:
                        needs[idx]['assignee'] = None
                        save_needs(needs)
                        bot.answer_callback_query(call.id, "–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç —ç—Ç–æ–π –Ω—É–∂–¥—ã.")
                        list_text, keyboard = build_needs_view(call.from_user, needs, user_id in admin_user_ids)
                        try:
                            bot.edit_message_text(list_text, call.message.chat.id, call.message.message_id)
                            bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=keyboard)
                        except Exception:
                            pass
                    else:
                        bot.answer_callback_query(call.id, "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º —ç—Ç–æ–π –Ω—É–∂–¥—ã")
                else:
                    bot.answer_callback_query(call.id, "–ù–µ—á–µ–≥–æ –æ—Å–≤–æ–±–æ–∂–¥–∞—Ç—å")
            else:
                bot.answer_callback_query(call.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å")
        else:
            bot.answer_callback_query(call.id)
    except Exception as e:
        bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {str(e)}")
        logger.error(f"–û—à–∏–±–∫–∞ –≤ callback-–∑–∞–ø—Ä–æ—Å–µ: {e}")

from flask import Flask, request

app = Flask(__name__)

@app.route("/" + TOKEN, methods=["POST"])
def webhook():
    json_str = request.get_data().decode("utf-8")
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return "OK", 200

@app.route("/")
def index():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!", 200

def keep_alive():
    while True:
        try:
            url = f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}/"
            r = requests.get(url, timeout=10)
            logger.info(f"[KeepAlive] ping {url} -> {r.status_code}")
        except Exception as e:
            logger.error(f"[KeepAlive] –æ—à–∏–±–∫–∞: {e}")
        time.sleep(60)

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–π–º–∞—É—Ç–∞ –∞–¥–º–∏–Ω–æ–≤
    timeout_thread = threading.Thread(target=check_admin_timeout, daemon=True)
    timeout_thread.start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º keep-alive –ø–æ—Ç–æ–∫
    keep_alive_thread = threading.Thread(target=keep_alive, daemon=True)
    keep_alive_thread.start()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
    webhook_url = f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}/{TOKEN}"
    bot.remove_webhook()
    try:
        bot.set_webhook(url=webhook_url)
        logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")

    app.run(host="0.0.0.0", port=int(os.getenv("PORT", 5000)))
