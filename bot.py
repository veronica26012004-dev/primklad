import psycopg2
import telebot
from telebot import types
import threading
import logging
import os
from dotenv import load_dotenv
import time
from flask import Flask, request

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Flask
app = Flask(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(filename='bot.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv('BOT_TOKEN')
DB_URL = os.getenv('DATABASE_URL')
WEBHOOK_URL = os.getenv('WEBHOOK_URL')  # –ù–∞–ø—Ä–∏–º–µ—Ä, https://your-app.onrender.com/<TOKEN>
if not TOKEN or not DB_URL or not WEBHOOK_URL:
    logging.error("BOT_TOKEN, DATABASE_URL –∏–ª–∏ WEBHOOK_URL –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

bot = telebot.TeleBot(TOKEN)

# –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è thread-safe –¥–æ—Å—Ç—É–ø–∞
db_lock = threading.Lock()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_database():
    with db_lock:
        conn = psycopg2.connect(DB_URL)
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS inventory (
                item TEXT PRIMARY KEY,
                owner TEXT
            )
        ''')
        conn.commit()
        conn.close()

init_database()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def get_inventory():
    with db_lock:
        conn = psycopg2.connect(DB_URL)
        cursor = conn.cursor()
        cursor.execute('SELECT item, owner FROM inventory ORDER BY item')
        items = cursor.fetchall()
        conn.close()
        return {item: owner for item, owner in items}

def add_item(item_name):
    with db_lock:
        conn = psycopg2.connect(DB_URL)
        cursor = conn.cursor()
        cursor.execute('INSERT INTO inventory (item, owner) VALUES (%s, %s) ON CONFLICT DO NOTHING', (item_name, None))
        conn.commit()
        conn.close()

def delete_item(item_name):
    with db_lock:
        conn = psycopg2.connect(DB_URL)
        cursor = conn.cursor()
        cursor.execute('DELETE FROM inventory WHERE item = %s', (item_name,))
        conn.commit()
        conn.close()

def update_item_owner(item_name, owner):
    with db_lock:
        conn = psycopg2.connect(DB_URL)
        cursor = conn.cursor()
        cursor.execute('UPDATE inventory SET owner = %s WHERE item = %s', (owner, item_name))
        conn.commit()
        conn.close()

def find_item_in_db(item_name):
    with db_lock:
        conn = psycopg2.connect(DB_URL)
        cursor = conn.cursor()
        cursor.execute('SELECT item FROM inventory')
        all_items = cursor.fetchall()
        conn.close()

        normalized_search = normalize_text(item_name)
        for (db_item,) in all_items:
            if normalize_text(db_item) == normalized_search:
                return db_item
        return None

# –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å —ç–º–æ–¥–∑–∏
def create_main_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        types.KeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å'),
        types.KeyboardButton('‚ûñ –£–¥–∞–ª–∏—Ç—å'),
        types.KeyboardButton('üéÅ –í—ã–¥–∞—Ç—å'),
        types.KeyboardButton('‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å'),
        types.KeyboardButton('üìã –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å')
    ]
    keyboard.add(*buttons)
    return keyboard

main_keyboard = create_main_keyboard()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def show_menu(chat_id):
    inventory = get_inventory()
    text = "üì¶ *–ò–ù–í–ï–ù–¢–ê–†–¨:*\n\n"
    if not inventory:
        text += "üì≠ –ü—É—Å—Ç–æ\n"
    else:
        available_count = 0
        given_count = 0

        for item, owner in sorted(inventory.items()):
            if owner is None:
                text += f"‚úÖ **{item}** - –¥–æ—Å—Ç—É–ø–µ–Ω\n"
                available_count += 1
            else:
                text += f"üî∏ {item} - {owner}\n"
                given_count += 1

        text += f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {available_count} –¥–æ—Å—Ç—É–ø–Ω–æ, {given_count} –≤—ã–¥–∞–Ω–æ"

    bot.send_message(chat_id, text, parse_mode='Markdown', reply_markup=main_keyboard)
    user_states[chat_id] = 'main'

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
    logging.info(f"User {message.chat.id} started bot")
    welcome_text = "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ–º!*\n\n"
    welcome_text += "üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
    welcome_text += "‚ûï –î–æ–±–∞–≤–∏—Ç—å - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç\n"
    welcome_text += "‚ûñ –£–¥–∞–ª–∏—Ç—å - —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç\n"
    welcome_text += "üéÅ –í—ã–¥–∞—Ç—å - –≤—ã–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç –∫–æ–º—É-—Ç–æ\n"
    welcome_text += "‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å - –≤–µ—Ä–Ω—É—Ç—å –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å\n"
    welcome_text += "üìã –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å - –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫"

    bot.send_message(message.chat.id, welcome_text, parse_mode='Markdown', reply_markup=main_keyboard)
    show_menu(message.chat.id)

# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    chat_id = message.chat.id
    text = message.text.strip()
    state = user_states.get(chat_id, 'main')

    try:
        if state == 'main':
            if text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å':
                user_states[chat_id] = 'add'
                bot.send_message(chat_id, "üìù *–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å?*\n(–Ω–∞–ø–∏—à–∏—Ç–µ '—Å—Ç–æ–ø' –¥–ª—è –≤—ã—Ö–æ–¥–∞)",
                               parse_mode='Markdown', reply_markup=types.ReplyKeyboardRemove())

            elif text == '‚ûñ –£–¥–∞–ª–∏—Ç—å':
                user_states[chat_id] = 'delete'
                bot.send_message(chat_id, "üóëÔ∏è *–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å?*\n(–Ω–∞–ø–∏—à–∏—Ç–µ '—Å—Ç–æ–ø' –¥–ª—è –≤—ã—Ö–æ–¥–∞)",
                               parse_mode='Markdown', reply_markup=types.ReplyKeyboardRemove())

            elif text == 'üéÅ –í—ã–¥–∞—Ç—å':
                user_states[chat_id] = 'give_who'
                bot.send_message(chat_id, "üë§ *–ö–æ–º—É –≤—ã–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç?*\n(–Ω–∞–ø–∏—à–∏—Ç–µ –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è)",
                               parse_mode='Markdown', reply_markup=types.ReplyKeyboardRemove())

            elif text == '‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å':
                user_states[chat_id] = 'return_items'
                return_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
                return_keyboard.add('üîÑ –í–µ—Ä–Ω—É—Ç—å –≤—Å–µ', 'üö´ –û—Ç–º–µ–Ω–∞')
                bot.send_message(chat_id, "üì¶ *–ö–∞–∫–æ–π –ø—Ä–µ–¥–º–µ—Ç –≤–µ—Ä–Ω—É—Ç—å?*\n(–Ω–∞–ø–∏—à–∏—Ç–µ '—Å—Ç–æ–ø' –¥–ª—è –≤—ã—Ö–æ–¥–∞)",
                               parse_mode='Markdown', reply_markup=return_keyboard)

            elif text == 'üìã –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å':
                show_menu(chat_id)

            else:
                show_menu(chat_id)

        elif state == 'add':
            if normalize_text(text) == '—Å—Ç–æ–ø':
                bot.send_message(chat_id, "üëå –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é", reply_markup=main_keyboard)
                show_menu(chat_id)
            elif text:
                existing_item = find_item_in_db(text)
                if existing_item is None:
                    item_name = ' '.join(text.strip().split())
                    add_item(item_name)
                    bot.send_message(chat_id, f"‚úÖ *{item_name}* –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å!\n–ß—Ç–æ –µ—â–µ –¥–æ–±–∞–≤–∏—Ç—å? (—Å—Ç–æ–ø –¥–ª—è –≤—ã—Ö–æ–¥–∞)",
                                   parse_mode='Markdown')
                else:
                    bot.send_message(chat_id, f"‚ö†Ô∏è *{existing_item}* —É–∂–µ –µ—Å—Ç—å –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ!\n–ß—Ç–æ –µ—â–µ –¥–æ–±–∞–≤–∏—Ç—å? (—Å—Ç–æ–ø –¥–ª—è –≤—ã—Ö–æ–¥–∞)",
                                   parse_mode='Markdown')

        elif state == 'delete':
            if normalize_text(text) == '—Å—Ç–æ–ø':
                bot.send_message(chat_id, "üëå –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é", reply_markup=main_keyboard)
                show_menu(chat_id)
            elif text:
                existing_item = find_item_in_db(text)
                if existing_item is not None:
                    delete_item(existing_item)
                    bot.send_message(chat_id, f"‚úÖ *{existing_item}* —É–¥–∞–ª–µ–Ω –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è!\n–ß—Ç–æ –µ—â–µ —É–¥–∞–ª–∏—Ç—å? (—Å—Ç–æ–ø –¥–ª—è –≤—ã—Ö–æ–¥–∞)",
                                   parse_mode='Markdown')
                else:
                    bot.send_message(chat_id, f"‚ùå *{text}* –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ!\n–ß—Ç–æ –µ—â–µ —É–¥–∞–ª–∏—Ç—å? (—Å—Ç–æ–ø –¥–ª—è –≤—ã—Ö–æ–¥–∞)",
                                   parse_mode='Markdown')

        elif state == 'give_who':
            if normalize_text(text) == '—Å—Ç–æ–ø':
                bot.send_message(chat_id, "üëå –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é", reply_markup=main_keyboard)
                show_menu(chat_id)
            elif text:
                recipient = ' '.join(text.strip().split())
                user_states[chat_id] = ('give_items', recipient)
                bot.send_message(chat_id, f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: *{recipient}*\nüì¶ *–ö–∞–∫–æ–π –ø—Ä–µ–¥–º–µ—Ç –≤—ã–¥–∞—Ç—å?* (—Å—Ç–æ–ø –¥–ª—è –≤—ã—Ö–æ–¥–∞)",
                               parse_mode='Markdown')

        elif isinstance(state, tuple) and state[0] == 'give_items':
            owner = state[1]
            if normalize_text(text) == '—Å—Ç–æ–ø':
                bot.send_message(chat_id, "üëå –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é", reply_markup=main_keyboard)
                show_menu(chat_id)
            elif text:
                existing_item = find_item_in_db(text)
                if existing_item is not None:
                    inventory = get_inventory()
                    if inventory[existing_item] is None:
                        update_item_owner(existing_item, owner)
                        bot.send_message(chat_id, f"‚úÖ *{existing_item}* –≤—ã–¥–∞–Ω *{owner}*!\n–ß—Ç–æ –µ—â–µ –≤—ã–¥–∞—Ç—å? (—Å—Ç–æ–ø –¥–ª—è –≤—ã—Ö–æ–¥–∞)",
                                       parse_mode='Markdown')
                    else:
                        bot.send_message(chat_id, f"‚ö†Ô∏è *{existing_item}* —É–∂–µ –≤—ã–¥–∞–Ω *{inventory[existing_item]}*!\n–ß—Ç–æ –µ—â–µ –≤—ã–¥–∞—Ç—å? (—Å—Ç–æ–ø –¥–ª—è –≤—ã—Ö–æ–¥–∞)",
                                       parse_mode='Markdown')
                else:
                    bot.send_message(chat_id, f"‚ùå *{text}* –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ!\n–ß—Ç–æ –µ—â–µ –≤—ã–¥–∞—Ç—å? (—Å—Ç–æ–ø –¥–ª—è –≤—ã—Ö–æ–¥–∞)",
                                   parse_mode='Markdown')

        elif state == 'return_items':
            if normalize_text(text) == '—Å—Ç–æ–ø' or text == 'üö´ –û—Ç–º–µ–Ω–∞':
                bot.send_message(chat_id, "üëå –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é", reply_markup=main_keyboard)
                show_menu(chat_id)
            elif text == 'üîÑ –í–µ—Ä–Ω—É—Ç—å –≤—Å–µ':
                inventory = get_inventory()
                returned_count = 0
                for item in inventory:
                    if inventory[item] is not None:
                        update_item_owner(item, None)
                        returned_count += 1
                bot.send_message(chat_id, f"‚úÖ –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤: *{returned_count}*",
                               parse_mode='Markdown', reply_markup=main_keyboard)
                show_menu(chat_id)
            elif text:
                existing_item = find_item_in_db(text)
                if existing_item is not None:
                    inventory = get_inventory()
                    if inventory[existing_item] is not None:
                        update_item_owner(existing_item, None)
                        bot.send_message(chat_id, f"‚úÖ *{existing_item}* –≤–æ–∑–≤—Ä–∞—â–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å!\n–ß—Ç–æ –µ—â–µ –≤–µ—Ä–Ω—É—Ç—å? (—Å—Ç–æ–ø –¥–ª—è –≤—ã—Ö–æ–¥–∞)",
                                       parse_mode='Markdown')
                    else:
                        bot.send_message(chat_id, f"‚ÑπÔ∏è *{existing_item}* —É–∂–µ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ!\n–ß—Ç–æ –µ—â–µ –≤–µ—Ä–Ω—É—Ç—å? (—Å—Ç–æ–ø –¥–ª—è –≤—ã—Ö–æ–¥–∞)",
                                       parse_mode='Markdown')
                else:
                    bot.send_message(chat_id, f"‚ùå *{text}* –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ!\n–ß—Ç–æ –µ—â–µ –≤–µ—Ä–Ω—É—Ç—å? (—Å—Ç–æ–ø –¥–ª—è –≤—ã—Ö–æ–¥–∞)",
                                   parse_mode='Markdown')

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {chat_id}: {e}")
        bot.send_message(chat_id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=main_keyboard)
        show_menu(chat_id)

# –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def clean_old_states():
    while True:
        time.sleep(3600)  # –ö–∞–∂–¥—ã–µ 60 –º–∏–Ω—É—Ç
        current_time = time.time()
        for chat_id in list(user_states.keys()):
            if current_time - user_states.get(chat_id, {}).get('last_activity', 0) > 3600:
                del user_states[chat_id]

# –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
threading.Thread(target=clean_old_states, daemon=True).start()

# Webhook endpoint
@app.route('/' + TOKEN, methods=['POST'])
def webhook():
    try:
        update = telebot.types.Update.de_json(request.get_json())
        if update:
            bot.process_new_updates([update])
        return 'OK', 200
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ webhook: {e}")
        return 'Error', 500

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
@app.route('/')
def setup_webhook():
    bot.remove_webhook()
    bot.set_webhook(url=WEBHOOK_URL)
    return "Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", 200

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    bot.remove_webhook()
    bot.set_webhook(url=WEBHOOK_URL)
    app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 5000)))
